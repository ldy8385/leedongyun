var e0a = {
    'l1': 240,
    'd0': "en_us",
    'J0': 'tap',
    'm0': "img/language/en_en.png",
    'N0': null,
    'w0': 'undefined',
    'f': "back_game2",
    'Q0': "img/language/es_spain.png",
    't0': "http://yx8.com/?litifangkuailianliankan",
    'Z0': 1000,
    'b0': "pointer",
    'H': 'en',
    's0': "Div",
    'x0': 'px ',
    'f1': "es_spain",
    'g0': "http://www.juegosmahjong.com/",
    'y0': 'MSPointerMove',
    'X': "back_help",
    'r1': "img/music1.png",
    'D': "back_game4",
    'g1': 100,
    'G': 'img',
    'K0': 'visible',
    'z0': 'none',
    'n0': "zh-cn",
    'N': "ru_russian",
    'k0': "tur_turkish",
    'B': "languageUI",
    'V0': "fr_france",
    'O0': true,
    'e0': "it_italy",
    'I0': "http://www.mahjonggames.com",
    'T0': "px",
    'R0': 'div',
    'O': "div",
    'P': 'resize',
    'q1': "mahjong_css",
    'u': 'lang',
    'E': "back_game5",
    'S': "face_level",
    'i0': 'idle',
    'j0': "url(",
    'B0': "img/sound1.png",
    'E0': 'px',
    'l0': "arg_argentina",
    'L': 'wakeup',
    'F0': "shuffle_pause",
    'c0': "br_portugal",
    'A': "back_game3",
    'h1': "de_germany",
    'T': "absolute",
    'o0': "pol_polish",
    'C0': "img/music2.png",
    'u0': "mx_mexico",
    'c1': "img/back.png",
    'v0': 'ontouchstart',
    'e1': "none",
    'Y': "img/sound2.png",
    'r0': "in_india",
    'h0': 'gameContainer',
    'R': "pt_portugal",
    'A0': 'hiscorehtml5'
};
var config = {
    debug: false,
    credits: e0a.O0,
    soundSprite: {
        Click: [740, 300],
        teXiao1: [1040, 1600],
        teXiao2: [2760, 1600],
        teXiao3: [4400, 1200],
        teXiao4: [5770, e0a.Z0],
        STick: [0, 730]
    },
    showCards: [16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],
    levelTime: [120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1, e0a.l1],
    data: [
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 1, 0, 0, 0],
                [0, 1, 1, 0, 1, 1, 1, 0, 0],
                [0, 1, 0, 1, 1, 0, 1, 1, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 1, 1, 0, 1, 1, 0, 1, 0],
                [0, 0, 1, 1, 1, 0, 1, 1, 0],
                [0, 0, 0, 1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 1, 1, 0],
                [0, 1, 1, 0, 1, 0, 0, 1, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 0, 1, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 0, 1, 1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 1, 1, 0, 0, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 0, 0, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 0, 1, 1, 1]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 1, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, 1, 0, 0],
                [1, 0, 1, 1, 0, 0, 1, 1, 0],
                [0, 1, 0, 0, 0, 1, 1, 1, 0],
                [0, 0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 1, 1, 1, 0, 1, 0, 0],
                [0, 0, 0, 1, 1, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1]
            ],
            [
                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 1, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, 1, 0, 0],
                [1, 0, 1, 0, 0, 0, 1, 1, 0],
                [0, 1, 0, 0, 0, 1, 1, 1, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 0, 1, 0, 0],
                [0, 0, 0, 1, 1, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 1, 2, 2, 2, 2, 1, 0, 0],
                [0, 1, 2, 2, 2, 2, 1, 0, 0],
                [0, 1, 2, 2, 2, 2, 1, 0, 0],
                [0, 1, 2, 2, 2, 2, 1, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 2, 0, 0, 0],
                [0, 0, 1, 1, 0, 2, 2, 0, 0],
                [0, 0, 1, 1, 0, 2, 2, 2, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 2, 0, 0, 0],
                [0, 0, 1, 1, 0, 2, 2, 0, 0],
                [0, 0, 1, 1, 0, 0, 2, 2, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 1, 0, 0, 0, 0, 0, 1, 1],
                [1, 1, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 1, 1],
                [1, 1, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ]
        ],
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0],
                [0, 1, 1, 1, 0, 0, 1, 0, 0],
                [0, 1, 1, 0, 0, 0, 1, 0, 0],
                [0, 1, 1, 0, 0, 1, 1, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 0]
            ],
            [
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 1, 1, 0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0, 1, 1, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 0]
            ],
            [
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 1, 1, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 1, 1, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [0, 1, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 0, 1, 0, 0, 1, 0, 0],
                [1, 0, 1, 0, 0, 1, 1, 1, 0],
                [1, 1, 0, 0, 1, 1, 1, 0, 0],
                [1, 0, 0, 1, 1, 1, 0, 0, 1],
                [0, 0, 1, 1, 1, 0, 0, 1, 1],
                [0, 0, 0, 1, 0, 0, 1, 0, 1],
                [0, 0, 0, 0, 0, 1, 0, 0, 1],
                [0, 0, 0, 0, 1, 1, 1, 1, 0]
            ],
            [
                [0, 1, 1, 1, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 1, 0, 0],
                [1, 0, 0, 0, 0, 0, 1, 1, 0],
                [1, 0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 1, 1, 0, 0, 0, 0, 1],
                [0, 0, 0, 1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 1, 1, 1, 0]
            ],
            [
                [0, 1, 1, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 1, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 1, 1, 0]
            ],
            [
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 0]
            ]
        ],
        [
            [
                [1, 1, 0, 0, 0, 0, 0, 1, 1],
                [1, 1, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 1, 1, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 1, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 1, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 1, 1],
                [1, 1, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ]
        ],
        [
            [
                [0, 1, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 2, 2, 2, 2, 0, 0],
                [0, 0, 1, 0, 2, 0, 2, 0, 1],
                [0, 0, 0, 1, 0, 2, 2, 0, 0],
                [0, 1, 0, 0, 1, 0, 2, 0, 1],
                [0, 0, 1, 0, 0, 1, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, 1, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 1, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 1, 0, 0, 0, 1],
                [0, 0, 1, 0, 0, 1, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, 1, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 1, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 1, 0, 0, 0, 1],
                [0, 0, 1, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 1, 0, 0, 1, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 1, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 1, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 0, 0, 0, 2, 0, 0, 0, 0],
                [0, 1, 0, 0, 2, 0, 0, 1, 0],
                [0, 0, 1, 0, 2, 0, 1, 0, 0],
                [0, 0, 0, 1, 2, 1, 0, 0, 0],
                [2, 2, 2, 2, 1, 2, 2, 2, 2],
                [0, 0, 0, 1, 2, 1, 0, 0, 0],
                [0, 0, 1, 0, 2, 0, 1, 0, 0],
                [0, 1, 0, 0, 2, 0, 0, 1, 0],
                [0, 0, 0, 0, 2, 0, 0, 0, 1]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 1, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 1, 1, 1, 1, 0, 0, 0, 0],
                [1, 1, 0, 0, 1, 1, 0, 0, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 0],
                [1, 0, 0, 1, 1, 0, 0, 1, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 1, 0, 0, 1, 1, 0, 1, 0],
                [0, 0, 1, 0, 1, 0, 1, 0, 0],
                [0, 0, 0, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 1, 0, 0, 0, 0, 0, 1, 1],
                [1, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 1, 0, 1, 1, 0, 0, 1, 0],
                [0, 1, 1, 1, 2, 1, 0, 1, 0],
                [0, 1, 1, 2, 2, 2, 1, 1, 0],
                [0, 1, 0, 1, 2, 1, 1, 1, 0],
                [0, 1, 0, 0, 1, 1, 0, 1, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 1, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 1, 1, 1, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ]
        ],
        [
            [
                [0, 0, 0, 0, 2, 0, 0, 0, 0],
                [0, 2, 2, 0, 2, 0, 2, 2, 0],
                [0, 2, 2, 0, 0, 0, 2, 2, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [2, 2, 0, 1, 1, 1, 0, 2, 2],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 2, 2, 0, 0, 0, 2, 2, 0],
                [0, 2, 2, 0, 2, 0, 2, 2, 0],
                [0, 0, 0, 0, 2, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 0, 0, 0, 1, 1, 0],
                [0, 1, 1, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 1, 1, 0, 0, 0, 1, 1, 0],
                [0, 1, 1, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 0, 0, 0, 1, 1, 0],
                [0, 1, 1, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 1, 1, 1, 1, 1, 0, 0, 0],
                [1, 0, 0, 0, 0, 1, 0, 0, 0],
                [1, 0, 0, 0, 0, 1, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1],
                [1, 0, 0, 0, 0, 1, 0, 0, 1],
                [0, 0, 2, 2, 0, 1, 0, 0, 1],
                [0, 0, 2, 2, 0, 1, 0, 0, 1],
                [0, 0, 0, 0, 0, 1, 0, 0, 1],
                [0, 0, 0, 0, 1, 1, 1, 1, 1]
            ],
            [
                [1, 1, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 1, 1, 1, 1, 1]
            ],
            [
                [1, 1, 1, 1, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 1, 1, 1, 1]
            ],
            [
                [1, 1, 1, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 1, 1, 1]
            ],
            [
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ]
        ],
        [
            [
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 0, 0, 0, 1, 0, 0, 1, 0],
                [1, 1, 1, 0, 0, 0, 0, 1, 0],
                [1, 1, 1, 0, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 1, 0, 1, 1, 0],
                [1, 1, 0, 0, 1, 1, 1, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 1, 0, 0, 0, 0, 0, 1, 0],
                [1, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 1, 1, 0, 1, 0, 1, 1, 0],
                [0, 1, 1, 0, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [1, 1, 1, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 0, 1, 1, 1, 1, 0],
                [1, 0, 1, 0, 0, 0, 0, 1, 0],
                [1, 1, 0, 1, 1, 1, 0, 1, 0],
                [0, 1, 1, 0, 1, 1, 0, 1, 0],
                [0, 1, 1, 1, 0, 1, 0, 0, 0],
                [0, 1, 1, 1, 1, 0, 1, 1, 1],
                [0, 1, 1, 1, 1, 1, 0, 1, 1],
                [0, 0, 0, 0, 0, 1, 1, 0, 1]
            ],
            [
                [0, 1, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 1, 1, 1, 1, 0],
                [1, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 1, 0, 0, 1, 1, 0, 1, 0],
                [0, 1, 1, 0, 0, 1, 0, 1, 0],
                [0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 0, 0, 1, 1],
                [0, 0, 0, 0, 1, 1, 0, 0, 1],
                [0, 0, 0, 0, 0, 1, 1, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 1, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
        [
            [
                [2, 1, 1, 1, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 0, 0, 0, 0],
                [2, 1, 0, 1, 0, 1, 1, 0, 0],
                [2, 2, 1, 0, 1, 0, 1, 0, 0],
                [1, 2, 2, 1, 0, 1, 0, 1, 0],
                [0, 1, 2, 2, 1, 0, 1, 0, 1],
                [0, 0, 1, 2, 2, 1, 0, 1, 1],
                [0, 0, 0, 1, 2, 2, 1, 0, 1],
                [0, 0, 0, 0, 1, 2, 2, 1, 2]
            ],
            [
                [2, 1, 1, 1, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 1, 1, 0, 0],
                [0, 0, 1, 0, 1, 0, 1, 0, 0],
                [1, 0, 0, 1, 0, 1, 0, 1, 0],
                [0, 1, 0, 0, 1, 0, 1, 0, 1],
                [0, 0, 1, 0, 0, 1, 0, 1, 1],
                [0, 0, 0, 1, 0, 0, 1, 0, 1],
                [0, 0, 0, 0, 1, 0, 0, 1, 2]
            ],
            [
                [2, 1, 1, 1, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 1, 1, 0, 0],
                [0, 0, 1, 0, 1, 0, 1, 0, 0],
                [0, 0, 0, 1, 0, 1, 0, 1, 0],
                [0, 0, 0, 0, 1, 0, 1, 0, 1],
                [0, 0, 0, 0, 0, 1, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 1, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 1, 2]
            ],
            [
                [2, 1, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 2]
            ]
        ],
        [
            [
                [1, 0, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 1, 1, 1],
                [1, 0, 0, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 1, 1]
            ],
            [
                [1, 0, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0, 2, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 1, 1]
            ],
            [
                [1, 0, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0, 2, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 1, 1]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 2, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 1]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 1]
            ],
            [
                [1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1]
            ]
        ],
        [
            [
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0],
                [0, 1, 0, 0, 1, 1, 1, 1, 0],
                [0, 1, 1, 0, 0, 1, 1, 1, 1],
                [0, 1, 1, 1, 0, 0, 1, 1, 0],
                [0, 1, 1, 1, 1, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 1, 0, 0],
                [0, 1, 0, 0, 0, 1, 1, 1, 0],
                [0, 1, 1, 0, 0, 0, 1, 1, 1],
                [0, 1, 1, 1, 0, 0, 0, 1, 0],
                [0, 0, 1, 1, 1, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 1, 1, 0],
                [0, 1, 1, 0, 0, 0, 0, 1, 1],
                [0, 0, 1, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]
        ],
    ]
};
if (!(window.console && console.log)) {
    var console = {
        log: function() {},
        debug: function() {},
        info: function() {},
        warn: function() {},
        error: function() {}
    };
}
var GameLib = {
    gameWidth: 800,
    gameHeight: 480,
    containerDiv: e0a.N0,
    storageJar: {},
    scale: 1,
    scalable: e0a.O0,
    gameName: '',
    lang: e0a.H,
    isTouch: e0a.v0 in window || navigator.msMaxTouchPoints,
    isIOS: /iP(hone|ad|od)/.test(navigator.userAgent),
    isAndroid: /Android/.test(navigator.userAgent),
    isIE: /IEMobile/.test(navigator.userAgent),
    online: e0a.O0,
    popup: e0a.N0,
    IEversion: (function() {
        var a = 3,
            b = document.createElement(e0a.R0),
            c = b.getElementsByTagName('i');
        do b.innerHTML = '<!--[if gt IE ' + (++a) + ']><i></i><![endif]-->'; while (c[0]);
        return a > 4 ? a : document.documentMode;
    }()),
    $_GET: function(a) {
        var b = new RegExp(a + "=([^&#=]*)");
        b = b.exec(location.search);
        if (e0a.N0 === b) return false;
        return decodeURIComponent(b[1]);
    },
    getLang: function() {
        var a = ',zh,en,nl,es,pt,fr,it,de,ru,in,pl,tr,',
            b = localStorage.getItem(e0a.u);
        if (e0a.N0 === b) {
            b = GameLib.getStorage(e0a.u);
            if (false === b) b = e0a.N0;
        }
        if (e0a.N0 === b) {
            b = (navigator.language || navigator.userLanguage).substr(0, 2);
            return a.indexOf(',' + b + ',') == -1 ? e0a.H : b;
        }
        return b;
    },
    setLang: function(b) {
        GameLib.lang = b;
        localStorage.setItem(e0a.u, b);
        try {
            GameHiscore.set(e0a.u, b);
        } catch (a) {};
    },
    getHostDomain: function() {
        var a = location.hostname,
            b, c = (parent === window) ? e0a.N0 : document.referrer;
        if (c !== e0a.N0) {
            a = c;
        } else if (document.referrer) {
            a = document.referrer;
        }
        a = a.replace(/^https?:\/\//i, '').replace(/^(www|dev)\./, '');
        b = a.indexOf('/');
        if (b != -1) {
            a = a.substr(0, b);
        }
        return a;
    },
    showPopup: function(b, c, d, e, h) {
        var m = '</div>',
            g = 'px;height:';
        this.closePopup();
        d = d || 400;
        e = e || 300;
        if (typeof(h) == e0a.w0) {
            h = true;
        };
        var j = document.createElement(e0a.R0),
            k = document.createElement(e0a.R0),
            n = document.documentElement.clientWidth,
            t = document.documentElement.clientHeight,
            p = !GameLib.isTouchDevice && (window.devicePixelRatio === undefined || window.devicePixelRatio === 1) && screen.width > e0a.Z0,
            C = [],
            z = -15;
        if (!h && !p) {
            d = n - 32;
            e = t - 32;
            z = 0;
        }
        k.className = 'popup';
        j.className = 'popupWrap close';
        j.onclick = function(a) {
            if (/close/.test(a.target.className)) {
                GameLib.closePopup();
            }
        };
        GameLib.popup = j;
        var s = 'width:' + d + g + e + 'px;margin-left:-' + (d / 2) + 'px;margin-top:-' + (e / 2) + 'px;';
        if (h) {
            s += 'transform:scale(' + GameLib.scale + ');-webkit-transform:scale(' + GameLib.scale + ');-ms-transform:scale(' + GameLib.scale + ')';
        }
        k.setAttribute('style', s);
        j.appendChild(k);
        if (b) {
            e -= 32;
            C.push('<div class="title">' + b + m);
        }
        var o = /\.html$/.test(c) || /^https?:\/\//.test(c) ? '<iframe src="' + c + '" style="display:block;width:' + d + g + e + 'px" frameborder="0"></iframe>' : '<div style="padding:5px 10px">' + c + m;
        C.push('<div style="overflow:auto;overflow-x:hidden;-webkit-overflow-scrolling:touch;width:' + d + 'px;height:' + e + 'px">' + o + '</div>', '<img src="img/close.png" class="close" style="right:' + z + 'px;top:' + z + 'px">');
        k.innerHTML = C.join('');
        document.body.appendChild(j);
        return false;
    },
    closePopup: function() {
        if (this.popup) {
            this.popup.parentNode.removeChild(this.popup);
            this.popup = e0a.N0;
        }
    },
    scaleGame: function(a, b, c) {
        var d = document.getElementById('rotateHint'),
            e = Math.min(document.documentElement.clientWidth, window.innerWidth),
            h = Math.min(document.documentElement.clientHeight, window.innerHeight),
            m = e > h,
            g = b || e,
            j = c || h;
        if (GameLib.scalable) {
            GameLib.scale = Math.min(g / GameLib.gameWidth, j / GameLib.gameHeight);
            GameLib.containerDiv.style.webkitTransform = GameLib.containerDiv.style.msTransform = GameLib.containerDiv.style.transform = 'scale(' + GameLib.scale + ')';
        } else {
            var k = document.querySelector('meta[name=viewport]'),
                n = 'width=' + GameLib.gameWidth;
            if (m && GameLib.gameHeight > window.innerHeight && GameLib.gameWidth <= e) {
                n = 'height=' + GameLib.gameHeight;
            }
            k.setAttribute('content', 'minimal-ui,user-scalable=0,' + n);
        } if (ThirdParty.config.showRotateHint) {
            d.style.display = GameLib.isTouch && !m ? 'block' : e0a.z0;
        }
        if (ThirdParty.config.centerHorizontally) {
            var t = GameLib.scale * GameLib.gameWidth < e ? (e - GameLib.scale * GameLib.gameWidth) / 2 : 0;
            GameLib.containerDiv.style.marginLeft = t + e0a.E0;
        }
        if (ThirdParty.config.centerVertically) {
            var t = GameLib.scale * GameLib.gameHeight <= h ? (h - GameLib.scale * GameLib.gameHeight) / 2 : 0;
            GameLib.containerDiv.style.marginTop = t + e0a.E0;
        }
        if (GameLib.isIOS) {
            window.scrollTo(0, -64);
        }
    },
    getStorage: function(a) {
        return this.storageJar[a] !== undefined ? this.storageJar[a] : false;
    },
    setStorage: function(a, b) {
        if (typeof a === 'object') {
            for (var c in a) {
                if (e0a.N0 === a[c]) {
                    delete this.storageJar[c];
                } else {
                    this.storageJar[c] = a[c];
                }
            }
        } else {
            if (e0a.N0 === b) {
                delete this.storageJar[a];
            } else {
                this.storageJar[a] = b;
            }
        }
        this.saveStorage();
    },
    saveStorage: function() {
        localStorage.setItem(this.gameName, JSON.stringify(this.storageJar));
    },
    init: function(d, e, h) {
        if (/debug/.test(location.search)) {
            window.onerror = function(a, b, c) {
                alert('Error in line ' + c + ' of ' + b + ':\n' + a);
            };
        }
        GameLib.gameName = d;
        GameLib.gameWidth = e;
        GameLib.gameHeight = h;
        Hammer(document.getElementById('rotateHint')).on(e0a.J0, function() {
            this.style.display = e0a.z0;
        });
        var m = GameLib.$_GET('bgcolor');
        if (false !== m) {
            document.documentElement.style.backgroundColor = m;
            document.documentElement.style.backgroundImage = e0a.z0;
        } else if (ThirdParty.config.background) {
            document.documentElement.style.background = /([\.\/])/.test(ThirdParty.config.background) ? 'url(' + ThirdParty.config.background + ')' : ThirdParty.config.background;
        }
        GameLib.containerDiv = document.getElementById(e0a.h0);
        GameLib.containerDiv.style.width = e + 'px';
        GameLib.containerDiv.style.height = h + 'px';
        if (/noscale/.test(location.search)) {
            GameLib.scalable = false;
            if (GameLib.isIE) {
                var g = document.createElement('style');
                g.appendChild(document.createTextNode('@-ms-viewport{width:' + e + 'px; height:' + h + 'px}'));
                document.querySelector('head').appendChild(g);
            }
        }
        var j = localStorage.getItem(this.gameName);
        if (e0a.N0 !== j) {
            this.storageJar = JSON.parse(j);
        }
        if (this.isIOS && /.*CPU.*OS (\d+)_(\d+)/i.test(navigator.userAgent)) {
            if (parseFloat(RegExp.$1 + '.' + RegExp.$2) >= 7.1) {
                document.addEventListener('touchmove', function(a) {
                    a.preventDefault();
                }, false);
            }
        }
        window.addEventListener(e0a.i0, function() {
            GameSound.setIdle(e0a.O0);
        }, false);
        window.addEventListener(e0a.L, function() {
            GameSound.setIdle(false);
        }, false);
        window.addEventListener(GameLib.isIOS ? 'orientationchange' : e0a.P, GameLib.scaleGame, false);
        var k = document.createEvent('Events');
        k.initEvent('gameready', e0a.O0, e0a.O0);
        k.gameName = d;
        document.dispatchEvent(k);
        GameLib.scaleGame();
        orderInit(1);
        if (GameLib.IEversion && GameLib.IEversion < 10) {
            var n = 'You are using a rather old version of Internet Explorer (version ' + GameLib.IEversion + ').\nThis game might or might not work. We strongly advise you to upgrade to <a href="http://windows.microsoft.com/en-us/internet-explorer/ie-11-worldwide-languages" target="_blank">Internet Explorer 10</a> or better.\nAlternatively, you can use <a href="http://getfirefox.com/" target="_blank">Firefox</a>, <a href="http://google.com/chrome/" target="_blank">Chrome</a>, <a href="http://apple.com/safari/" target="_blank">Safari</a> or <a href="http://opera.com/browser" target="_blank">Opera</a>.';
            this.showPopup('Old Internet Explorer', n, 300, 200);
        }
        if (/iP(od|hone)/.test(navigator.userAgent) && !navigator.standalone) {
            GameLib.windowHeight = window.innerHeight;
            setInterval(function() {
                if (window.innerHeight != GameLib.windowHeight) {
                    GameLib.windowHeight = window.innerHeight;
                    GameLib.scaleGame();
                }
            }, 500);
        };
        window.focus();
    }
};;
var CreateAll = {
    CreatedDiv: function(a, b, c, d) {
        var e = document.createElement(e0a.O);
        e.style.position = "relative";
        e.style.display = e0a.e1;
        e.style.left = a + e0a.T0;
        e.style.top = b + e0a.T0;
        c.appendChild(e);
        d.push(e);
        return e;
    },
    CreatedCanvas: function(a, b, c, d, e, h) {
        var m = document.createElement("Canvas");
        h.push(m);
        m.style.position = e0a.T;
        m.style.left = a + e0a.T0;
        m.style.top = b + e0a.T0;
        m.width = c;
        m.height = d;
        m.draggable = false;
        e.appendChild(m);
        return m;
    },
    CreateText: function(a, b, c, d) {
        var e = document.createElement(e0a.O);
        e.style.left = a + e0a.T0;
        e.style.top = b + e0a.T0;
        e.className = 'number';
        c.appendChild(e);
        d.push(e);
        return e;
    },
    CreatedCopyImg: function(a, b, c, d, e) {
        var h = document.createElement(e0a.G);
        h.src = loadRec.resource[a].src;
        h.style.position = e0a.T;
        h.style.left = b + e0a.T0;
        h.style.top = c + e0a.T0;
        h.draggable = false;
        d.appendChild(h);
        e.push(h);
        return h;
    },
    CreatedImg: function(a, b, c, d, e) {
        var h = loadRec.resource[a];
        h.style.position = e0a.T;
        h.style.left = b + e0a.T0;
        h.style.top = c + e0a.T0;
        h.draggable = false;
        d.appendChild(h);
        e.push(h);
        return h;
    },
    CreatedShowNumber: function(a, b, c, d, e, h) {
        var m = document.createElement(e0a.R0);
        m.className = 'number';
        m.style.left = a + e0a.E0;
        m.style.top = b + e0a.E0;
        m.style.width = c + 'px';
        m.style.height = d + 'px';
        e.appendChild(m);
        h.push(m);
        return m;
    },
    CreatedRemDiv: function(a, b, c, d) {
        var e = document.createElement(e0a.R0);
        e.className = 'remDiv';
        e.style.backgroundImage = e0a.j0 + loadRec.resource["rem"].src + ")";
        e.style.left = a + e0a.E0;
        e.style.top = b + e0a.E0;
        c.appendChild(e);
        d.push(e);
        return e;
    },
    CreatedButton: function(b, c, d, e, h) {
        var m = loadRec.resource[b],
            g = new Image();
        g.src = m.src;
        h.push(g);
        g.style.position = e0a.T;
        g.style.left = c + e0a.T0;
        g.style.top = d + e0a.T0;
        g.style.cursor = e0a.b0;
        g.draggable = false;
        e.appendChild(g);
        g.onmouseover = function(a) {
            g.style.top = (d + 2) + e0a.T0;
        };
        g.onmouseout = function(a) {
            g.style.top = d + e0a.T0;
        };
        return g;
    }
};;
var loadRec = {
        arrImg: [{
            src: "img/logo_zygomatic.png",
            id: "logozm"
        }, {
            src: "img/game_back.jpg",
            id: "back_game"
        }, {
            src: "img/game_back2.jpg",
            id: e0a.f
        }, {
            src: "img/game_back3.jpg",
            id: e0a.A
        }, {
            src: "img/game_back4.jpg",
            id: e0a.D
        }, {
            src: "img/game_back5.jpg",
            id: e0a.E
        }, {
            src: "img/menu_back.jpg",
            id: "back_menu"
        }, {
            src: "img/over_back.jpg",
            id: "back_over"
        }, {
            src: "img/help_back.jpg",
            id: e0a.X
        }, {
            src: "img/help.png",
            id: "back_help_"
        }, {
            src: e0a.c1,
            id: "no_back"
        }, {
            src: e0a.c1,
            id: e0a.S
        }, {
            src: e0a.c1,
            id: "face_pause"
        }, {
            src: e0a.c1,
            id: e0a.F0
        }, {
            src: e0a.c1,
            id: "time_out"
        }, {
            src: "img/back_save.png",
            id: "save_back"
        }, {
            src: "img/deBug.png",
            id: "deBug"
        }, {
            src: "img/language/back.png",
            id: "back"
        }, {
            src: "img/language/languageUI.png",
            id: e0a.B
        }, {
            src: "img/language/zh-cn.png",
            id: e0a.n0
        }, {
            src: "img/language/nl.png",
            id: "nl"
        }, {
            src: e0a.m0,
            id: e0a.d0
        }, {
            src: e0a.m0,
            id: "en_en"
        }, {
            src: e0a.Q0,
            id: e0a.f1
        }, {
            src: "img/language/pt_portugal.png",
            id: e0a.R
        }, {
            src: "img/language/br_portugal.png",
            id: e0a.c0
        }, {
            src: "img/language/fr_france.png",
            id: e0a.V0
        }, {
            src: "img/language/it_italy.png",
            id: e0a.e0
        }, {
            src: "img/language/de_germany.png",
            id: e0a.h1
        }, {
            src: "img/language/ru_russian.png",
            id: e0a.N
        }, {
            src: e0a.Q0,
            id: e0a.u0
        }, {
            src: e0a.Q0,
            id: e0a.l0
        }, {
            src: "img/language/in_india.png",
            id: e0a.r0
        }, {
            src: "img/language/pol_polish.png",
            id: e0a.o0
        }, {
            src: "img/language/tur_turkish.png",
            id: e0a.k0
        }, {
            src: e0a.r1,
            id: "music2"
        }, {
            src: e0a.C0,
            id: "music1"
        }, {
            src: e0a.B0,
            id: "sound2"
        }, {
            src: e0a.Y,
            id: "sound1"
        }, {
            src: e0a.r1,
            id: "music2_"
        }, {
            src: e0a.C0,
            id: "music1_"
        }, {
            src: e0a.B0,
            id: "sound2_"
        }, {
            src: e0a.Y,
            id: "sound1_"
        }, {
            src: "img/abc/a1.png",
            id: "a1"
        }, {
            src: "img/abc/a2.png",
            id: "a2"
        }, {
            src: "img/abc/a3.png",
            id: "a3"
        }, {
            src: "img/abc/a4.png",
            id: "a4"
        }, {
            src: "img/abc/a5.png",
            id: "a5"
        }, {
            src: "img/abc/a6.png",
            id: "a6"
        }, {
            src: "img/abc/a7.png",
            id: "a7"
        }, {
            src: "img/abc/a8.png",
            id: "a8"
        }, {
            src: "img/abc/a9.png",
            id: "a9"
        }, {
            src: "img/abc/a10.png",
            id: "a10"
        }, {
            src: "img/abc/a11.png",
            id: "a11"
        }, {
            src: "img/abc/a12.png",
            id: "a12"
        }, {
            src: "img/abc/a13.png",
            id: "a13"
        }, {
            src: "img/abc/a14.png",
            id: "a14"
        }, {
            src: "img/abc/a15.png",
            id: "a15"
        }, {
            src: "img/abc/a16.png",
            id: "a16"
        }, {
            src: "img/abc/a17.png",
            id: "a17"
        }, {
            src: "img/abc/a18.png",
            id: "a18"
        }, {
            src: "img/abc/a19.png",
            id: "a19"
        }, {
            src: "img/abc/a20.png",
            id: "a20"
        }, {
            src: "img/abc/a21.png",
            id: "a21"
        }, {
            src: "img/abc/a22.png",
            id: "a22"
        }, {
            src: "img/abc/a23.png",
            id: "a23"
        }, {
            src: "img/abc/a24.png",
            id: "a24"
        }, {
            src: "img/abc/a25.png",
            id: "a25"
        }, {
            src: "img/abc/a26.png",
            id: "a26"
        }, {
            src: "img/abc/a27.png",
            id: "a27"
        }, {
            src: "img/abc/a28.png",
            id: "a28"
        }, {
            src: "img/abc/a29.png",
            id: "a29"
        }, {
            src: "img/abc/a30.png",
            id: "a30"
        }, {
            src: "img/abc/a31.png",
            id: "a31"
        }, {
            src: "img/abc/a32.png",
            id: "a32"
        }, {
            src: "img/abc/a33.png",
            id: "a33"
        }, {
            src: "img/abc/a34.png",
            id: "a34"
        }, {
            src: "img/abc/a35.png",
            id: "a35"
        }, {
            src: "img/abc/b1.png",
            id: "b1"
        }, {
            src: "img/abc/b2.png",
            id: "b2"
        }, {
            src: "img/abc/b3.png",
            id: "b3"
        }, {
            src: "img/abc/b4.png",
            id: "b4"
        }, {
            src: "img/abc/a0.png",
            id: "a0"
        }],
        loadPerc: e0a.N0,
        creatloading: function() {
            var b = new Image();
            if (typeof ThirdParty.config.splashScreen !== e0a.w0) {
                b.src = ThirdParty.config.splashScreen;
            } else {
                b.src = 'img/loading.jpg';
            }
            b.className = "backPos";
            gameContainer.appendChild(b);
            this.data.push(b);
            b.onload = function() {
                var a = document.createElement(e0a.R0);
                a.className = 'progressbar';
                a.innerHTML = '<div id="loadPerc"></div>';
                gameContainer.appendChild(a);
                loadRec.data.push(a);
                loadRec.loadPerc = document.getElementById('loadPerc');
                loadRec.loadImages();
            };
        },
        imgNum: 0,
        resource: {},
        loadImages: function() {
            var a = new Image();
            a.onload = function() {
                if (loadRec.arrImg.length <= loadRec.imgNum) {
                    orderInit(2);
                    loadRec.remAll();
                    ThirdParty.loadingComplete();
                } else {
                    loadRec.loadImages();
                }
            };
            a.src = this.arrImg[this.imgNum].src;
            this.resource[this.arrImg[this.imgNum].id] = a;
            this.loadPerc.style.width = Math.floor(this.imgNum * 100 / this.arrImg.length) + '%';
            this.imgNum++;
        },
        data: [],
        remAll: function() {
            while (this.data.length > 0) {
                var a = this.data.pop();
                if (a && a.parentNode) {
                    a.parentNode.removeChild(a);
                }
            }
        }
    },
    GameMenu = {
        startGame: function() {
            var a = GameLib.getStorage('level');
            if (false === a) {
                a = 1;
            }
            if (a > 1) {
                saveDiv.style.display = "";
            } else {
                orderInit(4);
                GameMenu.remAll();
            }
        },
        showMenu: function() {
            var b = this.data;
            GameSound.stopMusic();
            languageUI.init(gameContainer);
            ThirdParty.mainMenu();
            var c = CreateAll.CreatedImg("back_menu", 0, 0, gameContainer, b);
            Hammer(c).on(e0a.J0, function() {
                languageUI.closeUI();
            });
            c = languageUI.CreatedButton("d_play", 507, 230, gameContainer, true, b, true);
            c.onmousedown = function() {
               
                    GameMenu.startGame();
                
            };
            c = languageUI.CreatedButton("d_help", 507, 292, gameContainer, true, b, true);
            Hammer(c).on(e0a.J0, function(a) {
                orderInit(3);
                GameMenu.remAll();
            });
            if (GameLib.online) {
                c = languageUI.CreatedButton("d_highscore", 507, 355, gameContainer, true, b, true);
                Hammer(c).on(e0a.J0, function(a) {
                    ThirdParty.showLeaderboard();
                });
                c = languageUI.CreatedButton("d_More", 507, 417, gameContainer, true, b, true);
                c.onclick = function() {
					window.location.href="http://www.7724.com/";
                   // ThirdParty.moreGames(GameLib.lang);
                };
            }
            saveDiv = CreateAll.CreatedDiv(0, 0, gameContainer, b);
            c = CreateAll.CreatedImg("save_back", 0, 0, saveDiv, b);
            c = languageUI.CreatedButton("d_ContinuePreviousGame", 329, 150, saveDiv, false, b, true);
            Hammer(c).on(e0a.J0, function(a) {
                saveDiv.style.display = e0a.e1;
                orderInit(4);
                GameMenu.remAll();
            });
            c = languageUI.CreatedButton("d_StartNewGame", 329, 247, saveDiv, false, b, true);
            Hammer(c).on(e0a.J0, function(a) {
                saveDiv.style.display = e0a.e1;
                GameLib.setStorage({
                    score: 0,
                    level: 1
                });
                orderInit(4);
                GameMenu.remAll();
            });
            languageUI.init(gameContainer);
            if (config.credits) {
                if (!document.querySelector('map[name="copyshareMap"]')) {/*
                    var d = document.createElement('map');
                    d.name = 'copyshareMap';
                    d.innerHTML = '<area shape="circle" coords="16,17,17" href="credits.html" onclick="return GameLib.showPopup(null,this.href,400,220)"><area shape="circle" coords="52,17,17" href="share.html" onclick="return GameLib.showPopup(null,this.href,400,220)">';
                    document.body.appendChild(d);
                */}
                var e = document.createElement(e0a.G);
                e.useMap = '#copyshareMap';
                e.src = 'img/copyshare.png';
                e.className = 'copycredits';
                gameContainer.appendChild(e);
                b.push(e);
            }
        },
        data: [],
        remAll: function() {
            while (this.data.length > 0) {
                var a = this.data.pop();
                if (a && a.parentNode) {
                    a.parentNode.removeChild(a);
                }
            }
        }
    };;
var GameHelp = {
    showHelp: function() {
        ThirdParty.gameHelp();
        var b = CreateAll.CreatedImg(e0a.X, 0, 0, gameContainer, this.data);
        CreateAll.CreatedImg("back_help_", 97, 236, gameContainer, this.data);
        b = languageUI.CreatedButton("d_back", 327, 394, gameContainer, true, this.data, true);
        Hammer(b).on(e0a.J0, function(a) {
            orderInit(2);
            GameHelp.remAll();
        });
        languageUI.CreatedButton("d_Howtoplay", 235, 40, gameContainer, false, this.data, false);
        languageUI.CreatedButton("d_HowtoplayText", 114, 123, gameContainer, false, this.data, false);
    },
    data: [],
    remAll: function() {
        while (this.data.length > 0) {
            var a = this.data.pop();
            if (a && a.parentNode) {
                a.parentNode.removeChild(a);
            }
        }
    }
};

function GamePlay() {
    var I = "POKER",
        J = 0,
        K = 0,
        M0, Q = 1;
    this.score = J;
    var X0, r = new Array(),
        q0 = new Array(),
        a1 = [],
        a0 = [],
        d1 = [],
        T1 = {},
        S1, S0, V1, U1, M;

    function C1() {
        var b = "mahjong";
        Q = GameLib.getStorage('level');
        if (false === Q) {
            Q = 1;
        }
        H1();
        K = config.levelTime[Q - 1] * 30;
        z1.innerHTML = Q + "/" + config.data.length;
        L0.contentEditable = false;
        GameSound.playSound("Send");
        var c, d, e, h, m, g = 36,
            j = 20,
            k = 42;
        M = [];
        var n = config.data[Q - 1],
            t = 0;
        for (c = 0; c < n.length; c++) {
            M.push([]);
            for (d = 0; d < n[c].length; d++) {
                M[c].push([]);
                for (e = 0; e < n[c][d].length; e++) {
                    M[c][d].push(n[c][d][e]);
                    if (n[c][d][e] == 1) {
                        t++;
                    }
                }
            }
        }
        var p = [];
        for (c = 1; c <= 35; c++) {
            p.push(c);
        }
        p = o1(p);
        d = config.showCards[Q - 1];
        p.splice(d);
        var C = [];
        while (C.length < t) {
            c = C.length % d;
            C.push(p[c]);
            C.push(p[c]);
        }
        C = o1(C);
        var z = e0a.Z0,
            s = e0a.Z0,
            o = 0,
            v = 0;
        r.splice(0);
        q0.splice(0);
        k1 = {};
        for (c = 0; c < M.length; c++) {
            for (d = 0; d < M[c].length; d++) {
                for (e = M[c][d].length - 1; e >= 0; e--) {
                    if (M[c][d][e] == 1) {
                        h = document.createElement(e0a.O);
                        h.nameName = I;
                        h.className = e0a.q1;
                        h.style.cursor = e0a.b0;
                        Hammer(h).on(e0a.J0, function(a) {
                            R1(a);
                        });
                        r.push(h);
                        h.ii = c;
                        h.jj = d;
                        h.kk = e;
                        h.idInt = C.pop();
                        h.style.left = (d * g + e * g) + e0a.T0;
                        h.style.top = (-c * k + d * j - e * j) + e0a.T0;
                        if (z > (d * g + e * g)) {
                            z = (d * g + e * g);
                        }
                        if (s > (-c * k + d * j - e * j)) {
                            s = (-c * k + d * j - e * j);
                        }
                        if (o < (d * g + e * g)) {
                            o = (d * g + e * g);
                        }
                        if (v < (-c * k + d * j - e * j)) {
                            v = (-c * k + d * j - e * j);
                        }
                        L0.appendChild(h);
                        m = i1(d1[h.idInt], e0a.N0, h);
                        m.className = e0a.q1;
                        m.width = 72;
                        m.height = 84;
                        m.id = b;
                        m.draggable = false;
                        h.appendChild(m);
                        h.img1 = m;
                        m = i1("b4", e0a.N0, h);
                        m.className = e0a.q1;
                        m.id = b;
                        m.draggable = false;
                        m.style.left = "-11px";
                        m.style.top = "-8.5px";
                        h.appendChild(m);
                        h.img2 = m;
                        m.style.display = e0a.e1;
                        k1[h.ii + "-" + h.jj + "-" + h.kk] = h;
                    } else {
                        if (M[c][d][e] == 2) {
                            h = document.createElement(e0a.O);
                            h.nameName = "POKERsssssssssssss";
                            h.className = e0a.q1;
                            q0.push(h);
                            h.ii = c;
                            h.jj = d;
                            h.kk = e;
                            h.idInt = 0;
                            h.style.left = (d * g + e * g) + e0a.T0;
                            h.style.top = (-c * k + d * j - e * j) + e0a.T0;
                            if (z > (d * g + e * g)) {
                                z = (d * g + e * g);
                            }
                            if (s > (-c * k + d * j - e * j)) {
                                s = (-c * k + d * j - e * j);
                            }
                            if (o < (d * g + e * g)) {
                                o = (d * g + e * g);
                            }
                            if (v < (-c * k + d * j - e * j)) {
                                v = (-c * k + d * j - e * j);
                            }
                            L0.appendChild(h);
                            m = i1(d1[0], e0a.N0, h);
                            m.className = e0a.q1;
                            m.id = b;
                            m.draggable = false;
                            h.appendChild(m);
                            k1[h.ii + "-" + h.jj + "-" + h.kk] = h;
                        }
                    }
                }
            }
        }
        var F = o - z + 55,
            Z = v - s + 65;
        F = ((660 - F) / 2 - z);
        Z = ((470 - Z) / 2 - s);
        for (c = 0; c < r.length; c++) {
            h = r[c];
            h.style.left = (h.jj * g + h.kk * g + F) + e0a.T0;
            h.style.top = (-h.ii * k + h.jj * j - h.kk * j + Z) + e0a.T0;
        }
        for (c = 0; c < q0.length; c++) {
            h = q0[c];
            h.style.left = (h.jj * g + h.kk * g + F) + e0a.T0;
            h.style.top = (-h.ii * k + h.jj * j - h.kk * j + Z) + e0a.T0;
        }
        D1();
        var D0 = L0.getBoundingClientRect();
        p1 = D0.left;
        s1 = D0.top;
        window.addEventListener('resize', function() {
            var a = L0.getBoundingClientRect();
            p1 = a.left;
            s1 = a.top;
        }, false);
        P0 = 0;
        t1 = false;
    }
    var p1, s1, k1;

    function O1(a, b) {
        k1[a.ii + "-" + a.jj + "-" + a.kk] = e0a.N0;
        k1[b.ii + "-" + b.jj + "-" + b.kk] = e0a.N0;
        M[a.ii][a.jj][a.kk] = 0;
        M[b.ii][b.jj][b.kk] = 0;
        var c;
        for (c = 0; c < r.length; c++) {
            if (r[c] == a || r[c] == b) {
                r.splice(c, 1);
                c--;
            }
        }
        Y0(e0a.g1);
        L0.removeChild(a);
        L0.removeChild(b);
        D1();
    }

    function j1(a) {
        var b = a.ii,
            c = a.jj,
            d = a.kk;
        if ((b < M.length - 1) && (M[b + 1][c][d] == 1)) {
            return false;
        }
        if (b == M.length - 1) {
            return e0a.O0;
        }
        if (N1(b, c, d) == 1) {
            return e0a.O0;
        }
        return false;
    }

    function N1(a, b, c) {
        var d = 0,
            e = 0,
            h = a,
            m = b,
            g = c;
        while (e0a.O0) {
            h++;
            m++;
            g--;
            if ((h >= M.length) || (m >= M[0].length) || (g < 0)) {
                h--;
                m--;
                g++;
                break;
            }
        }
        var j = h - a,
            k = 0,
            n = 0,
            t = 0,
            p = 0,
            C = 0,
            z = 0;
        for (var s = 1; s <= j; s++) {
            k = a + s;
            n = b + s;
            t = c - s;
            if (M[k][n][t] == 1) {
                return false;
            }
            if ((M[k][n - 1][t] == 1) && (M[k][n][t + 1] == 1)) {
                return false;
            }
            if (M[k][n - 1][t] == 1) d = 1;
            if (M[k][n][t + 1] == 1) e = 1;
        }
        if ((d == 1) && (e == 1)) {
            return false;
        }
        return e0a.O0;
    }

    function D1() {
        var a, b, c, d = [];
        for (a = 0; a < r.length; a++) {
            b = r[a];
            if (j1(b)) {
                d.push(b);
            }
        }
        if (d.length <= 1) {
            A1();
            return;
        }
        var e = [];
        for (a = 0; a < d.length - 1; a++) {
            for (c = a + 1; c < d.length; c++) {
                if (d[a].idInt == d[c].idInt) {
                    e.push([d[a], d[c]]);
                    break;
                }
            }
        }
        if (e.length > 0) {} else {
            H0.style.display = "";
            H0.idid = 0;
        }
    }
    var n1, m1;

    function F1() {
        if (n1) {
            n1.img2.style.display = e0a.e1;
            n1 = e0a.N0;
        }
        if (m1) {
            m1.img2.style.display = e0a.e1;
            m1 = e0a.N0;
        }
    }

    function Q1() {
        if (U) {
            U.img2.style.display = e0a.e1;
            U = e0a.N0;
        }
        F1();
        var a, b, c, d = [];
        for (a = 0; a < r.length; a++) {
            b = r[a];
            if (j1(b)) {
                d.push(b);
            }
        }
        var e = [];
        for (a = 0; a < d.length - 1; a++) {
            for (c = a + 1; c < d.length; c++) {
                if (d[a].idInt == d[c].idInt) {
                    e.push([d[a], d[c]]);
                }
            }
        }
        e = e[Math.floor(Math.random() * e.length)];
        n1 = e[0];
        m1 = e[1];
        n1.img2.style.display = "";
        m1.img2.style.display = "";
    }

    function P1() {
        if (U) {
            U.img2.style.display = e0a.e1;
            U = e0a.N0;
        }
        var a, b, c, d = [],
            e = [],
            h = [];
        for (a = 0; a < r.length; a++) {
            b = r[a];
            e.push(b.idInt);
            if (j1(b)) {
                d.push(b);
            } else {
                h.push(b);
            }
        }
        e.sort();
        d = o1(d);
        h = o1(h);
        while (d.length > 0) {
            b = d.pop();
            b.idInt = e.pop();
            i1(d1[b.idInt], b.img1, b);
        }
        while (h.length > 0) {
            b = h.pop();
            b.idInt = e.pop();
            i1(d1[b.idInt], b.img1, b);
        }
    }
    var U;

    function E1(a, b) {
        var c, d, e, h;
        for (c = r.length - 1; c >= 0; c--) {
            h = r[c];
            d = a - parseInt(h.style.left);
            e = b - parseInt(h.style.top);
            if (d < 0 || e < 0 || d > 55 || e > 65) {
                continue;
            }
            var m = {
                    x: d,
                    y: e
                },
                g = {
                    x: 28,
                    y: 33
                },
                j = {
                    x: 27,
                    y: 0
                },
                k = {
                    x: 0,
                    y: 16
                },
                n = f0(m, g, j) * f0(m, g, k),
                t = f0(j, k, m) * f0(j, k, g);
            if (n < 0 && t < 0) {
                continue;
            }
            m = {
                x: d,
                y: e
            };
            g = {
                x: 28,
                y: 33
            };
            j = {
                x: 27,
                y: 0
            };
            k = {
                x: 55,
                y: 16
            };
            n = f0(m, g, j) * f0(m, g, k);
            t = f0(j, k, m) * f0(j, k, g);
            if (n < 0 && t < 0) {
                continue;
            }
            m = {
                x: d,
                y: e
            };
            g = {
                x: 28,
                y: 33
            };
            j = {
                x: 0,
                y: 49
            };
            k = {
                x: 27,
                y: 65
            };
            n = f0(m, g, j) * f0(m, g, k);
            t = f0(j, k, m) * f0(j, k, g);
            if (n < 0 && t < 0) {
                continue;
            }
            m = {
                x: d,
                y: e
            };
            g = {
                x: 28,
                y: 33
            };
            j = {
                x: 55,
                y: 49
            };
            k = {
                x: 27,
                y: 65
            };
            n = f0(m, g, j) * f0(m, g, k);
            t = f0(j, k, m) * f0(j, k, g);
            if (n < 0 && t < 0) {
                continue;
            }
            return h;
        }
        return e0a.N0;
    }

    function f0(a, b, c) {
        var d = (c.x - a.x) * (b.y - a.y) - (b.x - a.x) * (c.y - a.y);
        return d;
    }
    var P0, t1, b1;

    function R1(a) {
        var b;
        if (a.target.nameName == I) {
            b = a.target;
        } else if (a.target.parentNode.nameName == I) {
            b = a.target.parentNode;
        } else {
            b = a.target.parentNode.parentNode;
        }
        var c = (a.gesture.center.clientX - p1) / GameLib.scale,
            d = (a.gesture.center.clientY - s1) / GameLib.scale,
            e = E1(c, d);
        if (e) {
            b = e;
        }
        if (j1(b) == false) {
            return;
        }
        GameSound.playSound("Click");
        F1();
        if (U) {
            if (b == U) {
                U.img2.style.display = e0a.e1;
                U = e0a.N0;
                return;
            }
            if (U.idInt == b.idInt) {
                if (t1) {
                    P0++;
                    if (P0 == 1) {
                        GameSound.playSound("teXiao1");
                        W0.style.display = "";
                    } else if (P0 == 2) {
                        GameSound.playSound("teXiao2");
                        W0.style.display = "";
                    } else if (P0 == 3) {
                        GameSound.playSound("teXiao3");
                        W0.style.display = "";
                    } else if (P0 >= 4) {
                        GameSound.playSound("teXiao4");
                        W0.style.display = "";
                    }
                    Y0(P0 * 50 + 50);
                    u1.innerHTML = P0 + "X";
                }
                if (b1) {
                    clearTimeout(b1);
                    b1 = e0a.N0;
                }
                t1 = e0a.O0;
                b1 = setTimeout(function() {
                    t1 = false;
                    W0.style.display = e0a.e1;
                    Y0(P0 * e0a.g1);
                    P0 = 0;
                }, 2000);
                O1(b, U);
                U = e0a.N0;
                W.style.display = e0a.e1;
                p0.style.display = e0a.e1;
            } else {
                U.img2.style.display = e0a.e1;
                U = b;
                W.style.display = "";
                W.src = b.img1.src;
                U.img2.style.display = "";
            }
        } else {
            W.style.display = "";
            W.src = b.img1.src;
            U = b;
            U.img2.style.display = "";
        }
    }

    function X1(a, b) {
        a.idInt = b;
        var c = a.getElementsByTagName("img");
        i1(d1[b - 1], c[0], a);
    }

    function W1(a, b) {
        var c = a.getElementsByTagName("img");
        if (b) {
            c[1].style.display = "";
        } else {
            c[1].style.display = e0a.e1;
        }
    }

    function i1(a, b, c) {
        var d, e = loadRec.resource[a];
        if (b) {
            d = b;
        } else {
            d = document.createElement(e0a.G);
            d.width = e.width;
            d.height = e.height;
        }
        d.src = e.src;
        return d;
    }

    function A1() {
        if (V.style.display == "") {
            return;
        }
        while (r.length > 0) {
            var a = r.pop();
            if (a && a.parentNode) {
                a.parentNode.removeChild(a);
            }
        }
        while (q0.length > 0) {
            var a = q0.pop();
            if (a && a.parentNode) {
                a.parentNode.removeChild(a);
            }
        }
        if (b1) {
            W0.style.display = e0a.e1;
            Y0(P0 * e0a.g1);
            clearTimeout(b1);
            b1 = e0a.N0;
        }
        V.next.style.display = "";
        V.end.style.display = e0a.e1;
        Y0(Math.floor(K / 15));
        u1.innerHTML = "";
        y1.innerHTML = "" + Math.floor(K / 15);
        V.style.display = "";
        V.style.zIndex = 10000;
        ThirdParty.levelComplete(Q);
        Q++;
        GameLib.setStorage({
            level: Q,
            score: J
        });
        if (Q > config.data.length) {
            V.next.style.display = e0a.e1;
            V.end.style.display = "";
            ThirdParty.gameComplete();
        }
    }

    function o1(a) {
        var b = new Array,
            c, d;
        while (a.length > 0) {
            c = Math.floor(a.length * Math.random());
            b.push(a[c]);
            a.splice(c, 1);
        }
        return b;
    }

    function G1() {
        var a, b, c = false;
        if (G0.style.display == "" || V.style.display == "" || U0.style.display == "") {
            return;
        }
        if (H0.style.display == "") {
            H0.idid++;
            if (H0.idid == 5) {
                P1();
            } else if (H0.idid >= 10) {
                H0.style.display = e0a.e1;
            }
            return;
        }
        K--;
        if (K <= 0) {
            U0.style.display = "";
            U0.style.zIndex = 10000;
            ThirdParty.gameOver();
            return;
        } else if (K < 30 * 10 && K % 30 == 29) {
            GameSound.playSound("STick");
        }
        B1();
    }

    function Y0(a) {
        J += a;
        x1.innerHTML = "" + J;
        gamePlay.score = J;
        if (J < 0) {
            gamePlay.score = 0;
        }
    }

    function B1() {
        var a = Math.floor(K / 30),
            b = "" + Math.floor(a / 60);
        if (b.length == 1) {
            b = "0" + b;
        }
        var c = "" + Math.floor(a % 60);
        if (c.length == 1) {
            c = "0" + c;
        }
        w1.innerHTML = b + ":" + c;
    }

    function H1() {
        var a;
        for (a = 0; a < S0.length; a++) {
            S0[a].style.display = e0a.e1;
        }
        a = (Q - 1) % S0.length;
        S0[a].style.display = "";
    }
    this.pauseGame = function() {
        G0.style.display = "";
        G0.style.zIndex = 10001;
    };
    this.showPlay = function() {
        window.addEventListener('idle', function() {
            setTimeout(gamePlay.pauseGame, GameLib.isTouch ? 0 : 300);
        }, false);
        ThirdParty.gameStart();
        X0 = setInterval(G1, 33);
        S0 = [];
        var h = CreateAll.CreatedImg("back_game", 0, 0, gameContainer, w);
        S0.push(h);
        h = CreateAll.CreatedImg("back_game2", 0, 0, gameContainer, w);
        S0.push(h);
        h = CreateAll.CreatedImg("back_game3", 0, 0, gameContainer, w);
        S0.push(h);
        h = CreateAll.CreatedImg("back_game4", 0, 0, gameContainer, w);
        S0.push(h);
        h = CreateAll.CreatedImg("back_game5", 0, 0, gameContainer, w);
        S0.push(h);
        GameSound.playMusic();
        if (ThirdParty.config.enableFullscreenToggle && screenfull.enabled) {
            var m = document.createElement('div');
            m.setAttribute('id', 'fullscreen-icon');
            m.setAttribute('title', 'Toggle fullscreen');
            m.onclick = function() {
                screenfull.toggle();
            };
            document.addEventListener(screenfull.raw.fullscreenchange, function() {
                m.className = 'fullscreen-icon' + (screenfull.isFullscreen ? ' on' : '');
            });
            gameContainer.appendChild(m);
            w.push(m);
        }
        x1 = CreateAll.CreatedShowNumber(687, 82, 100, 30, gameContainer, w);
        z1 = CreateAll.CreatedShowNumber(687, 162, 100, 30, gameContainer, w);
        w1 = CreateAll.CreatedShowNumber(687, 242, 100, 30, gameContainer, w);
        B1();
        J = GameLib.getStorage('score');
        if (false === J) {
            J = 0;
        }
        Y0(0);
        languageUI.CreatedButton("d_Score", 687, 57, gameContainer, false, w, false);
        languageUI.CreatedButton("d_Level", 687, 137, gameContainer, false, w, false);
        languageUI.CreatedButton("d_Time", 687, 217, gameContainer, false, w, false);
        if (config.debug) {
            h = CreateAll.CreatedImg("deBug", 609, 450, gameContainer, w);
            h.style.cursor = "pointer";
            h.onclick = function() {
                A1();
            };
        }
        h = languageUI.CreatedButton("d_Pause", 689, 339, gameContainer, true, w, true);
        Hammer(h).on('tap', gamePlay.pauseGame);
        h = languageUI.CreatedButton("d_Shuffle_", 689, 375, gameContainer, true, w, true);
        Hammer(h).on('tap', function() {
            Y0(-3000);
            H0.style.display = "";
            H0.idid = 0;
        });
        h = languageUI.CreatedButton("d_Hint", 689, 411, gameContainer, true, w, true);
        Hammer(h).on('tap', function() {
            Y0(-1000);
            Q1();
        });
        for (i = 0; i <= 35; i++) {
            d1.push("a" + i);
        }
        W = document.createElement('img');
        W.className = "mahjong_css";
        W.draggable = false;
        W.style.left = "592px";
        W.style.top = "56px";
        W.width = 72;
        W.height = 84;
        W.style.display = "none";
        gameContainer.appendChild(W);
        p0 = document.createElement('img');
        p0.className = "mahjong_css";
        p0.draggable = false;
        p0.style.left = "592px";
        p0.style.top = "153px";
        p0.width = 72;
        p0.height = 84;
        p0.style.display = "none";
        gameContainer.appendChild(p0);
        L0 = CreateAll.CreatedDiv(0, 0, gameContainer, w);
        L0.style.display = "";
        G0 = CreateAll.CreatedDiv(0, 0, gameContainer, w);
        V = CreateAll.CreatedDiv(0, 0, gameContainer, w);
        U0 = CreateAll.CreatedDiv(0, 0, gameContainer, w);
        W0 = CreateAll.CreatedDiv(0, 0, gameContainer, w);
        H0 = CreateAll.CreatedDiv(0, 0, gameContainer, w);
        M1();
        L1();
        K1();
        I1();
        J1();
        C1();
        if (GameLib.isTouch) {} else {
            L0.onmousemove = function(a) {
                a.stopPropagation();
                var b;
                if (a.target.nameName == "POKER") {
                    b = a.target;
                } else if (a.target.parentNode.nameName == "POKER") {
                    b = a.target.parentNode;
                } else {
                    return;
                }
                var c = (a.clientX - p1) / GameLib.scale,
                    d = (a.clientY - s1) / GameLib.scale,
                    e = E1(c, d);
                if (e) {
                    b = e;
                }
                if (j1(b) == false) {
                    return;
                }
                if (!U) {
                    W.style.display = "";
                    W.src = b.img1.src;
                } else {
                    p0.style.display = "";
                    p0.src = b.img1.src;
                }
            };
            L0.onmouseout = function(a) {
                a.stopPropagation();
                if (U) {
                    p0.style.display = "none";
                } else {
                    W.style.display = "none";
                    p0.style.display = "none";
                }
            };
        }
    };
    var W, p0, x1, w1, z1, y1, u1, L0, G0, V, U0, W0, H0;

    function I1() {
        languageUI.CreatedButton("d_Bonus Points", 62, 439, W0, false, w, false);
        u1 = CreateAll.CreatedShowNumber(264, 440, 40, 30, W0, w);
    }

    function J1() {
        CreateAll.CreatedImg("shuffle_pause", 0, 0, H0, w);
        languageUI.CreatedButton("d_Shuffling", 241, 194, H0, false, w, false);
    }

    function K1() {
        var b = CreateAll.CreatedImg("time_out", 0, 0, U0, w);
        b = languageUI.CreatedButton("d_Endgame", 290, 297, U0, true, w, true);
        Hammer(b).on(e0a.J0, function(a) {
            U0.style.display = e0a.e1;
            orderInit(5);
            v1();
            clearInterval(X0);
        });
        b = languageUI.CreatedButton("d_Timeout", 206, 129, U0, false, w, false);
    }

    function L1() {
        var b = CreateAll.CreatedImg(e0a.S, 0, 0, V, w);
        y1 = CreateAll.CreatedShowNumber(360, 267, 120, 30, V, w);
        b = languageUI.CreatedButton("d_NextLevel", 315, 322, V, true, w, true);
        Hammer(b).on(e0a.J0, function(a) {
            C1();
            V.style.display = e0a.e1;
        });
        V.next = b;
        b = languageUI.CreatedButton("d_Endgame", 315, 322, V, true, w, true);
        Hammer(b).on(e0a.J0, function(a) {
            U0.style.display = e0a.e1;
            orderInit(5);
            v1();
            clearInterval(X0);
        });
        V.end = b;
        b = languageUI.CreatedButton("d_Level Completed", 140, 89, V, false, w, false);
        b = languageUI.CreatedButton("d_TimeBonus", 325, 195, V, false, w, false);
    }

    function M1() {
        var b = CreateAll.CreatedImg("face_pause", 0, 0, G0, w);
        b = languageUI.CreatedButton("d_Continue", 314, 303, G0, true, w, true);
        Hammer(b).on(e0a.J0, function(a) {
            G0.style.display = "none";
        });
        b = languageUI.CreatedButton("d_Menu", 314, 160, G0, true, w, true);
        Hammer(b).on(e0a.J0, function(a) {
            orderInit(2);
            v1();
            clearInterval(X0);
        });
        var c = CreateAll.CreatedButton("music1", 350, 243, G0, w),
            d = CreateAll.CreatedButton("music2", 350, 243, G0, w),
            e = CreateAll.CreatedButton("music1_", 696, 296, gameContainer, w),
            h = CreateAll.CreatedButton("music2_", 696, 296, gameContainer, w),
            m = function(a) {
                c.style.display = "";
                d.style.display = e0a.e1;
                e.style.display = "";
                h.style.display = e0a.e1;
                GameSound.muteSound(e0a.O0);
            };
        Hammer(d).on(e0a.J0, m);
        Hammer(h).on(e0a.J0, m);
        m = function(a) {
            c.style.display = e0a.e1;
            d.style.display = "";
            e.style.display = e0a.e1;
            h.style.display = "";
            GameSound.muteSound(false);
        };
        Hammer(c).on(e0a.J0, m);
        Hammer(e).on(e0a.J0, m);
        if (GameSound.soundMuted) {
            e.style.display = "";
            h.style.display = e0a.e1;
            c.style.display = "";
            d.style.display = e0a.e1;
        } else {
            e.style.display = e0a.e1;
            h.style.display = "";
            c.style.display = e0a.e1;
            d.style.display = "";
        }
        var g = CreateAll.CreatedButton("sound1", 462, 243, G0, w),
            j = CreateAll.CreatedButton("sound2", 462, 243, G0, w),
            k = CreateAll.CreatedButton("sound1_", 740, 296, gameContainer, w),
            n = CreateAll.CreatedButton("sound2_", 740, 296, gameContainer, w);
        m = function() {
            g.style.display = "";
            j.style.display = e0a.e1;
            k.style.display = "";
            n.style.display = e0a.e1;
            GameSound.muteMusic(e0a.O0);
        };
        Hammer(j).on(e0a.J0, m);
        Hammer(n).on(e0a.J0, m);
        m = function() {
            g.style.display = e0a.e1;
            j.style.display = "";
            k.style.display = e0a.e1;
            n.style.display = "";
            GameSound.muteMusic(false);
        };
        Hammer(g).on(e0a.J0, m);
        Hammer(k).on(e0a.J0, m);
        if (GameSound.musicMuted) {
            k.style.display = "";
            n.style.display = e0a.e1;
            g.style.display = "";
            j.style.display = e0a.e1;
        } else {
            k.style.display = e0a.e1;
            n.style.display = "";
            g.style.display = e0a.e1;
            j.style.display = "";
        }
    }
    var w = [];

    function v1() {
        while (w.length > 0) {
            var a = w.pop();
            if (a && a.parentNode) {
                a.parentNode.removeChild(a);
            }
        }
        clearInterval(X0);
    }
};
var GameOver = {
    showOver: function() {
        GameLib.setStorage({
            score: 0,
            level: 1
        });
        var c = CreateAll.CreatedImg("back_over", 0, 0, gameContainer, this.data);
        c = languageUI.CreatedButton("d_YourScore", 483, 198, gameContainer, false, this.data, false);
        c = languageUI.CreatedButton("d_playagain", 452, 395, gameContainer, true, this.data, true);
        Hammer(c).on(e0a.J0, function(a) {
            ThirdParty.restartGame();
            orderInit(2);
            GameOver.remAll();
        });
        c = languageUI.CreatedButton("d_Submit", 452, 315, gameContainer, true, this.data, true);
        Hammer(c).on(e0a.J0, function(a) {
            var b = GameLib.getStorage('level');
            ThirdParty.submitScore(gamePlay.score, b);
        });
        var d = CreateAll.CreatedShowNumber(518, 267, 120, 30, gameContainer, this.data);
        d.innerHTML = "" + gamePlay.score;
		console.log(gamePlay.score);
		loadmeover();
		var mescore=gamePlay.score;
		var mefont="分";
		var melevel="";
		Getscore(mescore,1521,mefont,melevel);

    },
    data: [],
    remAll: function() {
        while (this.data.length > 0) {
            var a = this.data.pop();
            if (a && a.parentNode) {
                a.parentNode.removeChild(a);
            }
        }
    }
};;
var languageUI = {
    uiDiv: e0a.N0,
    buDiv: e0a.N0,
    canGuoQi: e0a.N0,
    canWenZi: e0a.N0,
    showLanguage: [1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
    arr: [
        ["CN", e0a.n0, 3, 'zh', 5],
        ["US", e0a.d0, 12, e0a.H, 1],
        ["NL", "nl", 2, 'nl', 4],
        ["EN", e0a.d0, 11, e0a.H, 2],
        ["ES", e0a.f1, 5, 'es', 6],
        ["PT", e0a.R, 9, 'pt', 9],
        ["BR", e0a.c0, 1, 'pt', 10],
        ["FR", e0a.V0, 6, 'fr', 11],
        ["IT", e0a.e0, 8, 'it', 12],
        ["DE", e0a.h1, 4, 'de', 13],
        ["RU", e0a.N, 10, 'ru', 14],
        ["MX", e0a.f1, 13, 'es', 7],
        ["ARG", e0a.f1, 14, 'es', 8],
        ["IN", e0a.r0, 7, 'in', 3],
        ["POL", e0a.o0, 15, 'pl', 15],
        ["TUR", e0a.k0, 16, 'tr', 16]
    ],
    strArr: "d_Credits,607,371,250,55@d_ContinuePreviousGame,6,260,300,62@d_StartNewGame,6,532,300,62@d_Shuffling,314,215,350,96@d_Endgame,232,70,216,60@d_Timeout,462,430,385,78@d_Level Completed,6,430,450,96@d_NextLevel,452,70,211,58@d_TimeBonus,667,221,190,56@d_play,4,4,203,56@d_help,212,4,203,56@d_highscore,420,4,203,56@d_More,514,137,227,56@d_back,668,73,173,52@d_Howtoplay,309,532,350,56@d_HowtoplayText,6,332,600,90@d_Submit,260,137,251,69@d_playagain,6,137,251,69@d_YourScore,667,279,190,51@d_Continue,628,4,224,62@d_Menu,4,70,224,62@d_Bonus Points,610,333,200,33@d_Pause,5,215,97,32@d_Score,745,161,100,25@d_Time,745,190,100,25@d_Level,745,131,100,25@d_Shuffle_,212,215,97,32@d_Hint,108,215,97,32",
    data: [],
    remData: [],
    rulArr: [
        [e0a.d0, e0a.t0],
        ["en_en", e0a.t0],
        [e0a.r0, e0a.t0],
        ["nl", "http://www.mahjongspelen.nl/"],
        [e0a.n0, e0a.t0],
        [e0a.f1, e0a.g0],
        [e0a.u0, e0a.g0],
        [e0a.l0, "http://www.juegosmahjong.com"],
        [e0a.R, e0a.I0],
        [e0a.c0, e0a.t0],
        [e0a.V0, "http://www.mahjongjeux.com/"],
        [e0a.e0, e0a.I0],
        [e0a.h1, "http://www.mahjongspielen.de/"],
        [e0a.N, e0a.I0],
        [e0a.o0, e0a.I0],
        [e0a.k0, e0a.I0]
    ],
    rul: "http://www.solitaireonline.com",
    init: function(b) {
        var c = "640px 130px";
        if (this.uiDiv) {
            b.appendChild(this.uiDiv);
            b.appendChild(this.buDiv);
            return;
        }
        this.data = this.strArr.split("@");
        for (var d = 0; d < this.data.length; d++) {
            var e = this.data[d].split(",");
            this.data[d] = e;
        }
        this.uiDiv = document.createElement(e0a.s0);
        this.buDiv = document.createElement(e0a.s0);
        b.appendChild(this.uiDiv);
        b.appendChild(this.buDiv);
        var h, m, g;
        for (d = 0; d < this.showLanguage.length; d++) {
            m = document.createElement(e0a.s0);
            g = document.createElement(e0a.s0);
            g.className = e0a.B;
            g.style.backgroundImage = e0a.j0 + loadRec.resource[e0a.B].src + ")";
            g.style.backgroundSize = c;
            g.style.backgroundPosition = '639px 30px';
            g.style.left = ((d % 2) * 59 + 1) + e0a.E0;
            g.style.top = (480 - 30 - (this.showLanguage.length / 2) * 25 + 25 * Math.floor(d / 2)) + 'px';
            g.style.width = 58 + 'px';
            g.style.height = 25 + 'px';
            m.appendChild(g);
            g = document.createElement(e0a.s0);
            g.className = e0a.B;
            g.style.backgroundImage = e0a.j0 + loadRec.resource[e0a.B].src + ")";
            g.style.backgroundSize = c;
            g.style.backgroundPosition = (640 - (this.arr[this.showLanguage[d]][2] - 1) * 25) + 'px 0px';
            g.style.left = ((d % 2) * 59 + 1) + e0a.E0;
            g.style.top = (480 - 30 - (this.showLanguage.length / 2) * 25 + 25 * Math.floor(d / 2) + 3) + 'px';
            g.style.width = 23 + 'px';
            g.style.height = 24 + 'px';
            m.appendChild(g);
            g = document.createElement(e0a.s0);
            g.className = e0a.B;
            g.style.backgroundImage = e0a.j0 + loadRec.resource[e0a.B].src + ")";
            g.style.backgroundSize = c;
            g.style.backgroundPosition = (640 - (this.arr[this.showLanguage[d]][2] - 1) * 40) + e0a.x0 + (130 - 48) + e0a.E0;
            g.style.left = ((d % 2) * 59 + 24) + e0a.E0;
            g.style.top = (480 - 30 - (this.showLanguage.length / 2) * 25 + 25 * Math.floor(d / 2)) + 'px';
            g.style.width = 33 + 'px';
            g.style.height = 24 + 'px';
            m.appendChild(g);
            m.idInt = d;
            this.uiDiv.appendChild(m);
        }
        g = document.createElement(e0a.s0);
        g.className = e0a.B;
        g.style.backgroundImage = e0a.j0 + loadRec.resource[e0a.B].src + ")";
        g.style.backgroundSize = c;
        g.style.backgroundPosition = '540px 30px';
        g.style.left = '1px';
        g.style.top = '450px';
        g.style.width = 124 + 'px';
        g.style.height = 27 + 'px';
        this.buDiv.appendChild(g);
        g = document.createElement(e0a.s0);
        g.className = e0a.B;
        g.style.backgroundImage = e0a.j0 + loadRec.resource[e0a.B].src + ")";
        g.style.backgroundSize = c;
        g.style.backgroundPosition = '1px 1px';
        g.style.left = '5px';
        g.style.top = '453px';
        g.style.width = 23 + 'px';
        g.style.height = 24 + 'px';
        this.buDiv.appendChild(g);
        this.canGuoQi = g;
        g = document.createElement(e0a.s0);
        g.className = e0a.B;
        g.style.backgroundImage = e0a.j0 + loadRec.resource[e0a.B].src + ")";
        g.style.backgroundSize = c;
        g.style.backgroundPosition = '1px 1px';
        g.style.left = '42px';
        g.style.top = '450px';
        g.style.width = 33 + 'px';
        g.style.height = 24 + 'px';
        this.buDiv.appendChild(g);
        this.canWenZi = g;
        this.uiDiv.style.display = e0a.e1;
        this.buDiv.onmousedown = this.buDiv.ontouchstart = function() {
            languageUI.uiDiv.style.display = "";
        };
        this.uiDiv.onmousedown = this.uiDiv.ontouchstart = function(a) {
            a.preventDefault();
            m = a.target.parentNode;
            languageUI.setXuanZhe(m.idInt);
            languageUI.uiDiv.style.display = e0a.e1;
        };
        var j = GameLib.getLang();
        for (d = 0; d < this.showLanguage.length; d++) {
            if (this.arr[this.showLanguage[d]][3] == j) {
                this.setXuanZhe(d);
                break;
            }
        }
    },
    closeUI: function() {
        this.uiDiv.style.display = e0a.e1;
    },
    CreatedButton: function(b, c, d, e, h, m, g) {
        var j = "languageText",
            k, n, t, p, C = 0;
        for (k = 0; k < this.data.length; k++) {
            if (this.data[k][0] == b) {
                n = this.data[k][1];
                t = this.data[k][2];
                p = this.data[k][3];
                C = this.data[k][4];
                break;
            }
        }
        if (C == 0) {
            return;
        }
        var z = document.createElement(e0a.s0),
            s, o = [e0a.n0, e0a.d0, "nl", "en_en", e0a.f1, e0a.R, e0a.c0, e0a.V0, e0a.e0, e0a.h1, e0a.N, e0a.u0, e0a.l0, e0a.r0, e0a.o0, e0a.k0];
        for (k = 0; k < o.length; k++) {
            if (o[k] == this.language) {
                break;
            }
        }
        if (h) {
            z.className = e0a.q1;
            z.style.left = c + e0a.E0;
            z.style.top = d + e0a.E0;
            s = loadRec.resource["back"];
            var v = document.createElement(e0a.s0);
            v.className = "backButton";
            v.style.backgroundImage = e0a.j0 + loadRec.resource["back"].src + ")";
            v.style.backgroundPosition = (s.width - n) + 'px ' + (s.height - t) + 'px';
            v.style.left = '0px';
            v.style.top = '0px';
            v.style.width = p + 'px';
            v.style.height = C + 'px';
            m.push(v);
            z.appendChild(v);
            s = loadRec.resource[this.language];
            n = parseInt(n);
            t = parseInt(t);
            v = document.createElement(e0a.s0);
            v.className = j;
            v.style.backgroundImage = e0a.j0 + s.src + ")";
            v.style.backgroundPosition = (s.width - n) + 'px ' + (s.height - t) + 'px';
            v.style.left = '0px';
            v.style.top = '0px';
            v.style.width = p + 'px';
            v.style.height = C + 'px';
            this.dataLanguage.push([b, v]);
            m.push(v);
            z.appendChild(v);
        } else {
            s = loadRec.resource[this.language];
            n = parseInt(n);
            t = parseInt(t);
            z = document.createElement(e0a.s0);
            z.style.backgroundImage = e0a.j0 + s.src + ")";
            z.className = j;
            z.style.backgroundPosition = (s.width - n) + 'px ' + (s.height - t) + 'px';
            z.style.left = c + e0a.E0;
            z.style.top = d + e0a.E0;
            z.style.width = p + 'px';
            z.style.height = C + 'px';
            this.dataLanguage.push([b, z]);
        }
        e.appendChild(z);
        if (g) {
            z.style.cursor = e0a.b0;
            z.onmousemove = function(a) {
                z.style.top = (d + 2) + e0a.T0;
            };
            z.onmouseout = function(a) {
                z.style.top = d + e0a.T0;
            };
        }
        z.draggable = false;
        m.push(z);
        return z;
    },
    setXuanZhe: function(a) {
        GameLib.setLang(this.arr[this.showLanguage[a]][3]);
        this.language = this.arr[this.showLanguage[a]][1];
        this.canGuoQi.style.backgroundPosition = (640 - (this.arr[this.showLanguage[a]][2] - 1) * 25) + 'px 0px';
        this.canWenZi.style.backgroundPosition = (640 - (this.arr[this.showLanguage[a]][2] - 1) * 40) + e0a.x0 + (130 - 48) + e0a.E0;
        for (var b = 0; b < this.rulArr.length; b++) {
            if (this.rulArr[b][0] == this.language) {
                this.rul = this.rulArr[b][1];
            }
        }
        var c;
        for (b = 0; b < this.dataLanguage.length; b++) {
            c = this.dataLanguage[b][1];
            if (c && c.parentNode && c.parentNode.parentNode) {
                this.getLanguageText(this.dataLanguage[b][0], c);
            } else {
                this.dataLanguage.splice(b, 1);
                b--;
            }
        }
    },
    language: e0a.n0,
    dataLanguage: new Array(),
    getLanguageText: function(a, b) {
        var c = loadRec.resource[this.language],
            d, e, h = 0;
        for (d = 0; d < this.data.length; d++) {
            if (this.data[d][0] == a) {
                e = this.data[d][1];
                h = this.data[d][2];
                break;
            }
        }
        b.style.backgroundImage = e0a.j0 + c.src + ")";
        e = parseInt(e);
        h = parseInt(h);
        b.style.backgroundPosition = (c.width - e) + 'px ' + (c.height - h) + 'px';
    }
};
(function(n, t) {
    'use strict';
    var p = function p(a, b) {
        return new p.Instance(a, b || {});
    };
    p.VERSION = '1.1.3';
    p.defaults = {
        behavior: {
            userSelect: 'none',
            touchAction: 'pan-y',
            touchCallout: 'none',
            contentZooming: 'none',
            userDrag: 'none',
            tapHighlightColor: 'rgba(0,0,0,0)'
        }
    };
    p.DOCUMENT = document;
    p.HAS_POINTEREVENTS = navigator.pointerEnabled || navigator.msPointerEnabled;
    p.HAS_TOUCHEVENTS = ('ontouchstart' in n);
    p.IS_MOBILE = /mobile|tablet|ip(ad|hone|od)|android|silk/i.test(navigator.userAgent);
    p.NO_MOUSEEVENTS = (p.HAS_TOUCHEVENTS && p.IS_MOBILE) || p.HAS_POINTEREVENTS;
    p.CALCULATE_INTERVAL = 25;
    var C = {},
        z = p.DIRECTION_DOWN = 'down',
        s = p.DIRECTION_LEFT = 'left',
        o = p.DIRECTION_UP = 'up',
        v = p.DIRECTION_RIGHT = 'right',
        F = p.POINTER_MOUSE = 'mouse',
        Z = p.POINTER_TOUCH = 'touch',
        D0 = p.POINTER_PEN = 'pen',
        I = p.EVENT_START = 'start',
        J = p.EVENT_MOVE = 'move',
        K = p.EVENT_END = 'end',
        M0 = p.EVENT_RELEASE = 'release',
        Q = p.EVENT_TOUCH = 'touch';
    p.READY = false;
    p.plugins = p.plugins || {};
    p.gestures = p.gestures || {};

    function X0() {
        if (p.READY) {
            return;
        }
        q0.determineEventTypes();
        r.each(p.gestures, function(a) {
            a0.register(a);
        });
        q0.onTouch(p.DOCUMENT, J, a0.detect);
        q0.onTouch(p.DOCUMENT, K, a0.detect);
        p.READY = true;
    }
    var r = p.utils = {
            extend: function extend(a, b, c) {
                for (var d in b) {
                    if (!b.hasOwnProperty(d) || (a[d] !== t && c)) {
                        continue;
                    }
                    a[d] = b[d];
                }
                return a;
            },
            on: function on(a, b, c) {
                a.addEventListener(b, c, false);
            },
            off: function off(a, b, c) {
                a.removeEventListener(b, c, false);
            },
            each: function each(a, b, c) {
                var d, e;
                if ('forEach' in a) {
                    a.forEach(b, c);
                } else if (a.length !== t) {
                    for (d = 0, e = a.length; d < e; d++) {
                        if (b.call(c, a[d], d, a) === false) {
                            return;
                        }
                    }
                } else {
                    for (d in a) {
                        if (a.hasOwnProperty(d) && b.call(c, a[d], d, a) === false) {
                            return;
                        }
                    }
                }
            },
            inStr: function inStr(a, b) {
                return a.indexOf(b) > -1;
            },
            inArray: function inArray(a, b) {
                if (a.indexOf) {
                    var c = a.indexOf(b);
                    return (c === -1) ? false : c;
                } else {
                    for (var d = 0, e = a.length; d < e; d++) {
                        if (a[d] === b) {
                            return d;
                        }
                    }
                    return false;
                }
            },
            toArray: function toArray(a) {
                return Array.prototype.slice.call(a, 0);
            },
            hasParent: function hasParent(a, b) {
                while (a) {
                    if (a == b) {
                        return true;
                    }
                    a = a.parentNode;
                }
                return false;
            },
            getCenter: function getCenter(b) {
                var c = [],
                    d = [],
                    e = [],
                    h = [],
                    m = Math.min,
                    g = Math.max;
                if (b.length === 1) {
                    return {
                        pageX: b[0].pageX,
                        pageY: b[0].pageY,
                        clientX: b[0].clientX,
                        clientY: b[0].clientY
                    };
                }
                r.each(b, function(a) {
                    c.push(a.pageX);
                    d.push(a.pageY);
                    e.push(a.clientX);
                    h.push(a.clientY);
                });
                return {
                    pageX: (m.apply(Math, c) + g.apply(Math, c)) / 2,
                    pageY: (m.apply(Math, d) + g.apply(Math, d)) / 2,
                    clientX: (m.apply(Math, e) + g.apply(Math, e)) / 2,
                    clientY: (m.apply(Math, h) + g.apply(Math, h)) / 2
                };
            },
            getVelocity: function getVelocity(a, b, c) {
                return {
                    x: Math.abs(b / a) || 0,
                    y: Math.abs(c / a) || 0
                };
            },
            getAngle: function getAngle(a, b) {
                var c = b.clientX - a.clientX,
                    d = b.clientY - a.clientY;
                return Math.atan2(d, c) * 180 / Math.PI;
            },
            getDirection: function getDirection(a, b) {
                var c = Math.abs(a.clientX - b.clientX),
                    d = Math.abs(a.clientY - b.clientY);
                if (c >= d) {
                    return a.clientX - b.clientX > 0 ? s : v;
                }
                return a.clientY - b.clientY > 0 ? o : z;
            },
            getDistance: function getDistance(a, b) {
                var c = b.clientX - a.clientX,
                    d = b.clientY - a.clientY;
                return Math.sqrt((c * c) + (d * d));
            },
            getScale: function getScale(a, b) {
                if (a.length >= 2 && b.length >= 2) {
                    return this.getDistance(b[0], b[1]) / this.getDistance(a[0], a[1]);
                }
                return 1;
            },
            getRotation: function getRotation(a, b) {
                if (a.length >= 2 && b.length >= 2) {
                    return this.getAngle(b[1], b[0]) - this.getAngle(a[1], a[0]);
                }
                return 0;
            },
            isVertical: function isVertical(a) {
                return a == o || a == z;
            },
            setPrefixedCss: function setPrefixedCss(a, b, c, d) {
                var e = ['', 'Webkit', 'Moz', 'O', 'ms'];
                b = r.toCamelCase(b);
                for (var h = 0; h < e.length; h++) {
                    var m = b;
                    if (e[h]) {
                        m = e[h] + m.slice(0, 1).toUpperCase() + m.slice(1);
                    }
                    if (m in a.style) {
                        a.style[m] = (d == null || d) && c || '';
                        break;
                    }
                }
            },
            toggleBehavior: function toggleBehavior(c, d, e) {
                if (!d || !c || !c.style) {
                    return;
                }
                r.each(d, function(a, b) {
                    r.setPrefixedCss(c, b, a, e);
                });
                var h = e && function() {
                    return false;
                };
                if (d.userSelect == 'none') {
                    c.onselectstart = h;
                }
                if (d.userDrag == 'none') {
                    c.ondragstart = h;
                }
            },
            toCamelCase: function toCamelCase(b) {
                return b.replace(/[_-]([a-z])/g, function(a) {
                    return a[1].toUpperCase();
                });
            }
        },
        q0 = p.event = {
            preventMouseEvents: false,
            started: false,
            shouldDetect: false,
            on: function on(b, c, d, e) {
                var h = c.split(' ');
                r.each(h, function(a) {
                    r.on(b, a, d);
                    e && e(a);
                });
            },
            off: function off(b, c, d, e) {
                var h = c.split(' ');
                r.each(h, function(a) {
                    r.off(b, a, d);
                    e && e(a);
                });
            },
            onTouch: function onTouch(h, m, g) {
                var j = this,
                    k = function k(a) {
                        var b = a.type.toLowerCase(),
                            c = p.HAS_POINTEREVENTS,
                            d = r.inStr(b, 'mouse'),
                            e;
                        if (d && j.preventMouseEvents) {
                            return;
                        } else if (d && m == I && a.button === 0) {
                            j.preventMouseEvents = false;
                            j.shouldDetect = true;
                        } else if (c && m == I) {
                            j.shouldDetect = (a.buttons === 1 || a1.matchType(Z, a));
                        } else if (!d && m == I) {
                            j.preventMouseEvents = true;
                            j.shouldDetect = true;
                        }
                        if (c && m != K) {
                            a1.updatePointer(m, a);
                        }
                        if (j.shouldDetect) {
                            e = j.doDetect.call(j, a, m, h, g);
                        }
                        if (e == K) {
                            j.preventMouseEvents = false;
                            j.shouldDetect = false;
                            a1.reset();
                        }
                        if (c && m == K) {
                            a1.updatePointer(m, a);
                        }
                    };
                this.on(h, C[m], k);
                return k;
            },
            doDetect: function doDetect(a, b, c, d) {
                var e = this.getTouchList(a, b),
                    h = e.length,
                    m = b,
                    g = e.trigger,
                    j = h;
                if (b == I) {
                    g = Q;
                } else if (b == K) {
                    g = M0;
                    j = e.length - ((a.changedTouches) ? a.changedTouches.length : 1);
                }
                if (j > 0 && this.started) {
                    m = J;
                }
                this.started = true;
                var k = this.collectEventData(c, m, e, a);
                if (b != K) {
                    d.call(a0, k);
                }
                if (g) {
                    k.changedLength = j;
                    k.eventType = g;
                    d.call(a0, k);
                    k.eventType = m;
                    delete k.changedLength;
                }
                if (m == K) {
                    d.call(a0, k);
                    this.started = false;
                }
                return m;
            },
            determineEventTypes: function determineEventTypes() {
                var a;
                if (p.HAS_POINTEREVENTS) {
                    if (n.PointerEvent) {
                        a = ['pointerdown', 'pointermove', 'pointerup pointercancel lostpointercapture'];
                    } else {
                        a = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp MSPointerCancel MSLostPointerCapture'];
                    }
                } else if (p.NO_MOUSEEVENTS) {
                    a = ['touchstart', 'touchmove', 'touchend touchcancel'];
                } else {
                    a = ['touchstart mousedown', 'touchmove mousemove', 'touchend touchcancel mouseup'];
                }
                C[I] = a[0];
                C[J] = a[1];
                C[K] = a[2];
                return C;
            },
            getTouchList: function getTouchList(b, c) {
                if (p.HAS_POINTEREVENTS) {
                    return a1.getTouchList();
                }
                if (b.touches) {
                    if (c == J) {
                        return b.touches;
                    }
                    var d = [],
                        e = [].concat(r.toArray(b.touches), r.toArray(b.changedTouches)),
                        h = [];
                    r.each(e, function(a) {
                        if (r.inArray(d, a.identifier) === false) {
                            h.push(a);
                        }
                        d.push(a.identifier);
                    });
                    return h;
                }
                b.identifier = 1;
                return [b];
            },
            collectEventData: function collectEventData(b, c, d, e) {
                var h = Z;
                if (r.inStr(e.type, 'mouse') || a1.matchType(F, e)) {
                    h = F;
                } else if (a1.matchType(D0, e)) {
                    h = D0;
                }
                return {
                    center: r.getCenter(d),
                    timeStamp: Date.now(),
                    target: e.target,
                    touches: d,
                    eventType: c,
                    pointerType: h,
                    srcEvent: e,
                    preventDefault: function() {
                        var a = this.srcEvent;
                        a.preventManipulation && a.preventManipulation();
                        a.preventDefault && a.preventDefault();
                    },
                    stopPropagation: function() {
                        this.srcEvent.stopPropagation();
                    },
                    stopDetect: function() {
                        return a0.stopDetect();
                    }
                };
            }
        },
        a1 = p.PointerEvent = {
            pointers: {},
            getTouchList: function getTouchList() {
                var b = [];
                r.each(this.pointers, function(a) {
                    b.push(a);
                });
                return b;
            },
            updatePointer: function updatePointer(a, b) {
                if (a == K) {
                    delete this.pointers[b.pointerId];
                } else {
                    b.identifier = b.pointerId;
                    this.pointers[b.pointerId] = b;
                }
            },
            matchType: function matchType(a, b) {
                if (!b.pointerType) {
                    return false;
                }
                var c = b.pointerType,
                    d = {};
                d[F] = (c === (b.MSPOINTER_TYPE_MOUSE || F));
                d[Z] = (c === (b.MSPOINTER_TYPE_TOUCH || Z));
                d[D0] = (c === (b.MSPOINTER_TYPE_PEN || D0));
                return d[a];
            },
            reset: function resetList() {
                this.pointers = {};
            }
        },
        a0 = p.detection = {
            gestures: [],
            current: null,
            previous: null,
            stopped: false,
            startDetect: function startDetect(a, b) {
                if (this.current) {
                    return;
                }
                this.stopped = false;
                this.current = {
                    inst: a,
                    startEvent: r.extend({}, b),
                    lastEvent: false,
                    lastCalcEvent: false,
                    futureCalcEvent: false,
                    lastCalcData: {},
                    name: ''
                };
                this.detect(b);
            },
            detect: function detect(b) {
                if (!this.current || this.stopped) {
                    return;
                }
                b = this.extendEventData(b);
                var c = this.current.inst,
                    d = c.options;
                r.each(this.gestures, function e(a) {
                    if (!this.stopped && c.enabled && d[a.name]) {
                        a.handler.call(a, b, c);
                    }
                }, this);
                if (this.current) {
                    this.current.lastEvent = b;
                }
                if (b.eventType == K) {
                    this.stopDetect();
                }
                return b;
            },
            stopDetect: function stopDetect() {
                this.previous = r.extend({}, this.current);
                this.current = null;
                this.stopped = true;
            },
            getCalculatedData: function getCalculatedData(a, b, c, d, e) {
                var h = this.current,
                    m = false,
                    g = h.lastCalcEvent,
                    j = h.lastCalcData;
                if (g && a.timeStamp - g.timeStamp > p.CALCULATE_INTERVAL) {
                    b = g.center;
                    c = a.timeStamp - g.timeStamp;
                    d = a.center.clientX - g.center.clientX;
                    e = a.center.clientY - g.center.clientY;
                    m = true;
                }
                if (a.eventType == Q || a.eventType == M0) {
                    h.futureCalcEvent = a;
                }
                if (!h.lastCalcEvent || m) {
                    j.velocity = r.getVelocity(c, d, e);
                    j.angle = r.getAngle(b, a.center);
                    j.direction = r.getDirection(b, a.center);
                    h.lastCalcEvent = h.futureCalcEvent || a;
                    h.futureCalcEvent = a;
                }
                a.velocityX = j.velocity.x;
                a.velocityY = j.velocity.y;
                a.interimAngle = j.angle;
                a.interimDirection = j.direction;
            },
            extendEventData: function extendEventData(b) {
                var c = this.current,
                    d = c.startEvent,
                    e = c.lastEvent || d;
                if (b.eventType == Q || b.eventType == M0) {
                    d.touches = [];
                    r.each(b.touches, function(a) {
                        d.touches.push({
                            clientX: a.clientX,
                            clientY: a.clientY
                        });
                    });
                }
                var h = b.timeStamp - d.timeStamp,
                    m = b.center.clientX - d.center.clientX,
                    g = b.center.clientY - d.center.clientY;
                this.getCalculatedData(b, e.center, h, m, g);
                r.extend(b, {
                    startEvent: d,
                    deltaTime: h,
                    deltaX: m,
                    deltaY: g,
                    distance: r.getDistance(d.center, b.center),
                    angle: r.getAngle(d.center, b.center),
                    direction: r.getDirection(d.center, b.center),
                    scale: r.getScale(d.touches, b.touches),
                    rotation: r.getRotation(d.touches, b.touches)
                });
                return b;
            },
            register: function register(c) {
                var d = c.defaults || {};
                if (d[c.name] === t) {
                    d[c.name] = true;
                }
                r.extend(p.defaults, d, true);
                c.index = c.index || 1000;
                this.gestures.push(c);
                this.gestures.sort(function(a, b) {
                    if (a.index < b.index) {
                        return -1;
                    }
                    if (a.index > b.index) {
                        return 1;
                    }
                    return 0;
                });
                return this.gestures;
            }
        };
    p.Instance = function(c, d) {
        var e = this;
        X0();
        this.element = c;
        this.enabled = true;
        r.each(d, function(a, b) {
            delete d[b];
            d[r.toCamelCase(b)] = a;
        });
        this.options = r.extend(r.extend({}, p.defaults), d || {});
        if (this.options.behavior) {
            r.toggleBehavior(this.element, this.options.behavior, true);
        }
        this.eventStartHandler = q0.onTouch(c, I, function(a) {
            if (e.enabled && a.eventType == I) {
                a0.startDetect(e, a);
            } else if (a.eventType == Q) {
                a0.detect(a);
            }
        });
        this.eventHandlers = [];
    };
    p.Instance.prototype = {
        on: function onEvent(b, c) {
            var d = this;
            q0.on(d.element, b, c, function(a) {
                d.eventHandlers.push({
                    gesture: a,
                    handler: c
                });
            });
            return d;
        },
        off: function offEvent(c, d) {
            var e = this;
            q0.off(e.element, c, d, function(a) {
                var b = r.inArray({
                    gesture: a,
                    handler: d
                });
                if (b !== false) {
                    e.eventHandlers.splice(b, 1);
                }
            });
            return e;
        },
        trigger: function triggerEvent(a, b) {
            if (!b) {
                b = {};
            }
            var c = p.DOCUMENT.createEvent('Event');
            c.initEvent(a, true, true);
            c.gesture = b;
            var d = this.element;
            if (r.hasParent(b.target, d)) {
                d = b.target;
            }
            d.dispatchEvent(c);
            return this;
        },
        enable: function enable(a) {
            this.enabled = a;
            return this;
        },
        dispose: function dispose() {
            var a, b;
            r.toggleBehavior(this.element, this.options.behavior, false);
            for (a = -1;
                (b = this.eventHandlers[++a]);) {
                r.off(this.element, b.gesture, b.handler);
            }
            this.eventHandlers = [];
            q0.off(this.element, C[I], this.eventStartHandler);
            return null;
        }
    };
    (function(g) {
        var j = false;

        function k(a, b) {
            var c = a0.current;
            if (b.options.dragMaxTouches > 0 && a.touches.length > b.options.dragMaxTouches) {
                return;
            }
            switch (a.eventType) {
                case I:
                    j = false;
                    break;
                case J:
                    if (a.distance < b.options.dragMinDistance && c.name != g) {
                        return;
                    }
                    var d = c.startEvent.center;
                    if (c.name != g) {
                        c.name = g;
                        if (b.options.dragDistanceCorrection && a.distance > 0) {
                            var e = Math.abs(b.options.dragMinDistance / a.distance);
                            d.pageX += a.deltaX * e;
                            d.pageY += a.deltaY * e;
                            d.clientX += a.deltaX * e;
                            d.clientY += a.deltaY * e;
                            a = a0.extendEventData(a);
                        }
                    }
                    if (c.lastEvent.dragLockToAxis || (b.options.dragLockToAxis && b.options.dragLockMinDistance <= a.distance)) {
                        a.dragLockToAxis = true;
                    }
                    var h = c.lastEvent.direction;
                    if (a.dragLockToAxis && h !== a.direction) {
                        if (r.isVertical(h)) {
                            a.direction = (a.deltaY < 0) ? o : z;
                        } else {
                            a.direction = (a.deltaX < 0) ? s : v;
                        }
                    }
                    if (!j) {
                        b.trigger(g + 'start', a);
                        j = true;
                    }
                    b.trigger(g, a);
                    b.trigger(g + a.direction, a);
                    var m = r.isVertical(a.direction);
                    if ((b.options.dragBlockVertical && m) || (b.options.dragBlockHorizontal && !m)) {
                        a.preventDefault();
                    }
                    break;
                case M0:
                    if (j && a.changedLength <= b.options.dragMaxTouches) {
                        b.trigger(g + 'end', a);
                        j = false;
                    }
                    break;
                case K:
                    j = false;
                    break;
            }
        }
        p.gestures.Drag = {
            name: g,
            index: 50,
            handler: k,
            defaults: {
                dragMinDistance: 10,
                dragDistanceCorrection: true,
                dragMaxTouches: 1,
                dragBlockHorizontal: false,
                dragBlockVertical: false,
                dragLockToAxis: false,
                dragLockMinDistance: 25
            }
        };
    })('drag');
    p.gestures.Gesture = {
        name: 'gesture',
        index: 1337,
        handler: function releaseGesture(a, b) {
            b.trigger(this.name, a);
        }
    };
    (function(e) {
        var h;

        function m(a, b) {
            var c = b.options,
                d = a0.current;
            switch (a.eventType) {
                case I:
                    clearTimeout(h);
                    d.name = e;
                    h = setTimeout(function() {
                        if (d && d.name == e) {
                            b.trigger(e, a);
                        }
                    }, c.holdTimeout);
                    break;
                case J:
                    if (a.distance > c.holdThreshold) {
                        clearTimeout(h);
                    }
                    break;
                case M0:
                    clearTimeout(h);
                    break;
            }
        }
        p.gestures.Hold = {
            name: e,
            index: 10,
            defaults: {
                holdTimeout: 500,
                holdThreshold: 2
            },
            handler: m
        };
    })('hold');
    p.gestures.Release = {
        name: 'release',
        index: Infinity,
        handler: function releaseGesture(a, b) {
            if (a.eventType == M0) {
                b.trigger(this.name, a);
            }
        }
    };
    p.gestures.Swipe = {
        name: 'swipe',
        index: 40,
        defaults: {
            swipeMinTouches: 1,
            swipeMaxTouches: 1,
            swipeVelocityX: 0.6,
            swipeVelocityY: 0.6
        },
        handler: function swipeGesture(a, b) {
            if (a.eventType == M0) {
                var c = a.touches.length,
                    d = b.options;
                if (c < d.swipeMinTouches || c > d.swipeMaxTouches) {
                    return;
                }
                if (a.velocityX > d.swipeVelocityX || a.velocityY > d.swipeVelocityY) {
                    b.trigger(this.name, a);
                    b.trigger(this.name + a.direction, a);
                }
            }
        }
    };
    (function(g) {
        var j = false;

        function k(a, b) {
            var c = b.options,
                d = a0.current,
                e = a0.previous,
                h, m;
            switch (a.eventType) {
                case I:
                    j = false;
                    break;
                case J:
                    j = j || (a.distance > c.tapMaxDistance);
                    break;
                case K:
                    if (!r.inStr(a.srcEvent.type, 'cancel') && a.deltaTime < c.tapMaxTime && !j) {
                        h = e && e.lastEvent && a.timeStamp - e.lastEvent.timeStamp;
                        m = false;
                        if (e && e.name == g && (h && h < c.doubleTapInterval) && a.distance < c.doubleTapDistance) {
                            b.trigger('doubletap', a);
                            m = true;
                        }
                        if (!m || c.tapAlways) {
                            d.name = g;
                            b.trigger(d.name, a);
                        }
                    }
                    break;
            }
        }
        p.gestures.Tap = {
            name: g,
            index: 100,
            handler: k,
            defaults: {
                tapMaxTime: 250,
                tapMaxDistance: 10,
                tapAlways: true,
                doubleTapDistance: 20,
                doubleTapInterval: 300
            }
        };
    })('tap');
    p.gestures.Touch = {
        name: 'touch',
        index: -Infinity,
        defaults: {
            preventDefault: true,
            preventMouse: false
        },
        handler: function touchGesture(a, b) {
            if (b.options.preventMouse && a.pointerType == F) {
                a.stopDetect();
                return;
            }
            if (b.options.preventDefault) {
                a.preventDefault();
            }
            if (a.eventType == Q) {
                b.trigger('touch', a);
            }
        }
    };
    (function(e) {
        var h = false;

        function m(a, b) {
            switch (a.eventType) {
                case I:
                    h = false;
                    break;
                case J:
                    if (a.touches.length < 2) {
                        return;
                    }
                    var c = Math.abs(1 - a.scale),
                        d = Math.abs(a.rotation);
                    if (c < b.options.transformMinScale && d < b.options.transformMinRotation) {
                        return;
                    }
                    a0.current.name = e;
                    if (!h) {
                        b.trigger(e + 'start', a);
                        h = true;
                    }
                    b.trigger(e, a);
                    if (d > b.options.transformMinRotation) {
                        b.trigger('rotate', a);
                    }
                    if (c > b.options.transformMinScale) {
                        b.trigger('pinch', a);
                        b.trigger('pinch' + (a.scale < 1 ? 'in' : 'out'), a);
                    }
                    break;
                case M0:
                    if (h && a.changedLength < 2) {
                        b.trigger(e + 'end', a);
                        h = false;
                    }
                    break;
            }
        }
        p.gestures.Transform = {
            name: e,
            index: 45,
            defaults: {
                transformMinScale: 0.01,
                transformMinRotation: 1
            },
            handler: m
        };
    })('transform');
    if (typeof define == 'function' && define.amd) {
        define(function() {
            return p;
        });
    } else if (typeof module !== 'undefined' && module.exports) {
        module.exports = p;
    } else {
        n.Hammer = p;
    }
})(window);;
(function(d, e) {
    var h = config.idleTimeout ? config.idleTimeout : 60,
        m, g = false,
        j, k, n = {
            hidden: 'visibilitychange',
            webkitHidden: 'webkitvisibilitychange',
            mozHidden: 'mozvisibilitychange',
            msHidden: 'msvisibilitychange'
        };

    function t(a, b) {
        if ((!g && a == e0a.L) || (g && a == e0a.i0)) return;
        g = a == e0a.i0;
        b = b || d;
        var c = e.createEvent('Events');
        c.initEvent(a, e0a.O0, e0a.O0);
        b.dispatchEvent(c);
    }

    function p() {
        m = d.setTimeout(function() {
            t(e0a.i0);
        }, h * e0a.Z0);
    }

    function C() {
        d.clearTimeout(m);
        t(e0a.L);
        p();
    }
    d.addEventListener('mousemove', C, false);
    d.addEventListener('mousedown', C, false);
    d.addEventListener('keydown', C, false);
    d.addEventListener('DOMMouseScroll', C, false);
    d.addEventListener('mousewheel', C, false);
    d.addEventListener('touchstart', C, false);
    d.addEventListener(e0a.y0, C, false);
    d.addEventListener('pagehide', function() {
        d.clearTimeout(m);
        t(e0a.i0);
    }, false);
    d.addEventListener('pageshow', C, false);
    for (j in n) {
        if (j in e) {
            k = n[j];
            break;
        }
    }
    e.addEventListener(k, function() {
        if (e[j]) {
            d.clearTimeout(m);
        } else {
            p();
        }
        t(e[j] ? e0a.i0 : e0a.L);
    });
    p();
})(window, document);;
(function() {
    'use strict';
    var m = typeof module !== 'undefined' && module.exports,
        g = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element,
        j = (function() {
            var a;
            var b;
            var c = [
                ['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
                ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
                ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
                ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
                ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']
            ];
            var d = 0;
            var e = c.length;
            var h = {};
            for (; d < e; d++) {
                a = c[d];
                if (a && a[1] in document) {
                    for (d = 0, b = a.length; d < b; d++) {
                        h[c[0][d]] = a[d];
                    }
                    return h;
                }
            }
            return false;
        })(),
        k = {
            request: function(a) {
                var b = j.requestFullscreen;
                a = a || document.documentElement;
                if (/5\.1[\.\d]* Safari/.test(navigator.userAgent)) {
                    a[b]();
                } else {
                    a[b](g && Element.ALLOW_KEYBOARD_INPUT);
                }
            },
            exit: function() {
                document[j.exitFullscreen]();
            },
            toggle: function(a) {
                if (this.isFullscreen) {
                    this.exit();
                } else {
                    this.request(a);
                }
            },
            onchange: function() {},
            onerror: function() {},
            raw: j
        };
    if (!j) {
        if (m) {
            module.exports = false;
        } else {
            window.screenfull = false;
        }
        return;
    }
    Object.defineProperties(k, {
        isFullscreen: {
            get: function() {
                return !!document[j.fullscreenElement];
            }
        },
        element: {
            enumerable: true,
            get: function() {
                return document[j.fullscreenElement];
            }
        },
        enabled: {
            enumerable: true,
            get: function() {
                var a = navigator.userAgent;
                return !!document[j.fullscreenEnabled] && a.indexOf('SAMSUNG GT-I9505') == -1 && a.indexOf('Silk/') == -1;
            }
        }
    });
    document.addEventListener(j.fullscreenchange, function(a) {
        k.onchange.call(k, a);
    });
    document.addEventListener(j.fullscreenerror, function(a) {
        k.onerror.call(k, a);
    });
    if (m) {
        module.exports = k;
    } else {
        window.screenfull = k;
    }
})();;
(function(e, h) {
    var m = "unsupported",
        g = "#ath",
        j = 'To add this web app to the home screen open the browser option menu and tap on <strong>Add to homescreen</strong>. <small>The menu can be accessed by pressing the menu hardware button if your device has one, or by tapping the top right menu icon <span class="ath-action-icon">icon</span>.</small>',
        k = "load",
        n = "addEventListener" in e,
        t = false;
    if (h.readyState === "complete") {
        t = e0a.O0;
    } else if (n) {
        e.addEventListener(k, p, false);
    }

    function p() {
        e.removeEventListener(k, p, false);
        t = e0a.O0;
    }
    var C = /\/ath(\/)?$/,
        z = /([\?&]ath=[^&]*$|&ath=[^&]*(&))/,
        s;

    function o(a) {
        s = s || new o.Class(a);
        return s;
    }
    o.intl = {
        de_de: {
            ios: "Um diese Web-App zum Home-Bildschirm hinzuzufügen, tippen Sie auf %icon und dann <strong>Zum Home-Bildschirm</strong>.",
            android: j
        },
        en_us: {
            ios: "To add this web app to the home screen: tap %icon and then <strong>Add to Home Screen</strong>.",
            android: j
        },
        es_es: {
            ios: "Para añadir esta aplicación web a la pantalla de inicio: pulsa %icon y selecciona <strong>Añadir a pantalla de inicio</strong>.",
            android: j
        },
        fr_fr: {
            ios: "Pour ajouter cette application web sur l'écran d'accueil : Appuyez %icon et sélectionnez <strong>Ajouter sur l'écran d'accueil</strong>.",
            android: j
        },
        he_il: {
            ios: '<span dir="rtl">להוספת האפליקציה למסך הבית: ללחוץ על %icon ואז <strong>הוסף למסך הבית</strong>.</span>',
            android: j
        },
        it_it: {
            ios: "Per aggiungere questa web app alla schermata iniziale: premi %icon e poi <strong>Aggiungi a Home</strong>.",
            android: 'Per aggiungere questa web app alla schermata iniziale, apri il menu opzioni del browser e premi su <strong>Aggiungi alla homescreen</strong>. <small>Puoi accedere al menu premendo il pulsante hardware delle opzioni se la tua device ne ha uno, oppure premendo l\'icona <span class="ath-action-icon">icon</span> in alto a destra.</small>'
        },
        nb_no: {
            ios: "For å installere denne appen på hjem-skjermen: trykk på %icon og deretter <strong>Legg til på Hjem-skjerm</strong>.",
            android: j
        },
        pt_br: {
            ios: "Para adicionar este app à tela de início: clique %icon e então <strong>Tela de início</strong>.",
            android: j
        },
        pt_pt: {
            ios: "Para adicionar esta app ao ecrã principal: clique %icon e depois <strong>Ecrã principal</strong>.",
            android: j
        },
        nl_nl: {
            ios: "Om deze webapp op je telefoon te installeren, klik op %icon en dan <strong>Zet in beginscherm</strong>.",
            android: j
        },
        sv_se: {
            ios: "För att lägga till denna webbapplikation på hemskärmen: tryck på %icon och därefter <strong>Lägg till på hemskärmen</strong>.",
            android: j
        },
        zh_cn: {
            ios: "如要把应用程式加至主屏幕,请点击%icon, 然后<strong>加至主屏幕</strong>",
            android: j
        },
        zh_tw: {
            ios: "如要把應用程式加至主屏幕, 請點擊%icon, 然後<strong>加至主屏幕</strong>.",
            android: j
        }
    };
    for (var v in o.intl) {
        o.intl[v.substr(0, 2)] = o.intl[v];
    }
    o.defaults = {
        appID: "org.cubiq.addtohome",
        fontSize: 15,
        debug: false,
        modal: false,
        mandatory: false,
        autostart: e0a.O0,
        skipFirstVisit: false,
        startDelay: 1,
        lifespan: 15,
        displayPace: 1440,
        maxDisplayCount: 0,
        icon: e0a.O0,
        message: "",
        validLocation: [],
        onInit: e0a.N0,
        onShow: e0a.N0,
        onRemove: e0a.N0,
        onAdd: e0a.N0,
        onPrivate: e0a.N0,
        privateModeOverride: false,
        detectHomescreen: false
    };
    var F = e.navigator.userAgent,
        Z = e.navigator;
    I(o, {
        hasToken: h.location.hash == g || C.test(h.location.href) || z.test(h.location.search),
        isRetina: e.devicePixelRatio && e.devicePixelRatio > 1,
        isIDevice: /iphone|ipod|ipad/i.test(F),
        isMobileChrome: F.indexOf("Android") > -1 && /Chrome\/[.0-9]*/.test(F),
        isMobileIE: F.indexOf("Windows Phone") > -1,
        language: Z.language && Z.language.toLowerCase().replace("-", "_") || ""
    });
    o.language = o.language && o.language in o.intl ? o.language : e0a.d0;
    o.isMobileSafari = o.isIDevice && F.indexOf("Safari") > -1 && F.indexOf("CriOS") < 0;
    o.OS = o.isIDevice ? "ios" : o.isMobileChrome ? "android" : o.isMobileIE ? "windows" : m;
    o.OSVersion = F.match(/(OS|Android) (\d+[_\.]\d+)/);
    o.OSVersion = o.OSVersion && o.OSVersion[2] ? +o.OSVersion[2].replace("_", ".") : 0;
    o.isStandalone = e.navigator.standalone || o.isMobileChrome && screen.height - h.documentElement.clientHeight < 40;
    o.isTablet = o.isMobileSafari && F.indexOf("iPad") > -1 || o.isMobileChrome && F.indexOf("Mobile") < 0;
    o.isCompatible = o.isMobileSafari && o.OSVersion >= 6 || o.isMobileChrome;
    var D0 = {
        lastDisplayTime: 0,
        returningVisitor: false,
        displayCount: 0,
        optedout: false,
        added: false
    };
    o.removeSession = function(b) {
        try {
            localStorage.removeItem(b || o.defaults.appID);
        } catch (a) {}
    };
    o.Class = function(b) {
        this.options = I({}, o.defaults);
        I(this.options, b);
        if (!n) {
            return;
        }
        this.options.mandatory = this.options.mandatory && ("standalone" in e.navigator || this.options.debug);
        this.options.modal = this.options.modal || this.options.mandatory;
        if (this.options.mandatory) {
            this.options.startDelay = -.5;
        }
        this.options.detectHomescreen = this.options.detectHomescreen === true ? "hash" : this.options.detectHomescreen;
        if (this.options.debug) {
            o.isCompatible = true;
            o.OS = typeof this.options.debug == "string" ? this.options.debug : o.OS == "unsupported" ? "android" : o.OS;
            o.OSVersion = o.OS == "ios" ? "8" : "4";
        }
        this.container = h.documentElement;
        this.session = localStorage.getItem(this.options.appID);
        this.session = this.session ? JSON.parse(this.session) : undefined;
        if (o.hasToken && (!o.isCompatible || !this.session)) {
            o.hasToken = false;
            J();
        }
        if (!o.isCompatible) {
            return;
        }
        this.session = this.session || D0;
        try {
            localStorage.setItem(this.options.appID, JSON.stringify(this.session));
            o.hasLocalStorage = true;
        } catch (a) {
            o.hasLocalStorage = false;
            if (this.options.onPrivate) {
                this.options.onPrivate.call(this);
            }
        }
        var c = !this.options.validLocation.length;
        for (var d = this.options.validLocation.length; d--;) {
            if (this.options.validLocation[d].test(h.location.href)) {
                c = true;
                break;
            }
        }
        if (localStorage.getItem("addToHome")) {
            this.optOut();
        }
        if (this.session.optedout || this.session.added || !c) {
            return;
        }
        if (o.isStandalone) {
            if (!this.session.added) {
                this.session.added = true;
                this.updateSession();
                if (this.options.onAdd && o.hasLocalStorage) {
                    this.options.onAdd.call(this);
                }
            }
            return;
        }
        if (this.options.detectHomescreen) {
            if (o.hasToken) {
                J();
                if (!this.session.added) {
                    this.session.added = true;
                    this.updateSession();
                    if (this.options.onAdd && o.hasLocalStorage) {
                        this.options.onAdd.call(this);
                    }
                }
                return;
            }
            if (this.options.detectHomescreen == "hash") {
                history.replaceState("", e.document.title, h.location.href + "#ath");
            } else if (this.options.detectHomescreen == "smartURL") {
                history.replaceState("", e.document.title, h.location.href.replace(/(\/)?$/, "/ath$1"));
            } else {
                history.replaceState("", e.document.title, h.location.href + (h.location.search ? "&" : "?") + "ath=");
            }
        }
        if (!this.session.returningVisitor) {
            this.session.returningVisitor = true;
            this.updateSession();
            if (this.options.skipFirstVisit) {
                return;
            }
        }
        if (!this.options.privateModeOverride && !o.hasLocalStorage) {
            return;
        }
        this.ready = true;
        if (this.options.onInit) {
            this.options.onInit.call(this);
        }
        if (this.options.autostart) {
            this.show();
        }
    };
    o.Class.prototype = {
        events: {
            load: "_delayedShow",
            error: "_delayedShow",
            orientationchange: "resize",
            resize: "resize",
            scroll: "resize",
            click: "remove",
            touchmove: "_preventDefault",
            transitionend: "_removeElements",
            webkitTransitionEnd: "_removeElements",
            MSTransitionEnd: "_removeElements"
        },
        handleEvent: function(a) {
            var b = this.events[a.type];
            if (b) {
                this[b](a);
            }
        },
        show: function(a) {
            if (this.options.autostart && !t) {
                setTimeout(this.show.bind(this), 50);
                return;
            }
            if (this.shown) {
                return;
            }
            var b = Date.now(),
                c = this.session.lastDisplayTime;
            if (a !== true) {
                if (!this.ready) {
                    return;
                }
                if (b - c < this.options.displayPace * 6e4) {
                    return;
                }
                if (this.options.maxDisplayCount && this.session.displayCount >= this.options.maxDisplayCount) {
                    return;
                }
            }
            this.shown = true;
            this.session.lastDisplayTime = b;
            this.session.displayCount++;
            this.updateSession();
            if (!this.applicationIcon) {
                if (o.OS == "ios") {
                    this.applicationIcon = h.querySelector('head link[rel^=apple-touch-icon][sizes="152x152"],head link[rel^=apple-touch-icon][sizes="144x144"],head link[rel^=apple-touch-icon][sizes="120x120"],head link[rel^=apple-touch-icon][sizes="114x114"],head link[rel^=apple-touch-icon]');
                } else {
                    this.applicationIcon = h.querySelector('head link[rel^="shortcut icon"][sizes="196x196"],head link[rel^=apple-touch-icon]');
                }
            }
            var d = "";
            if (this.options.message in o.intl) {
                d = o.intl[this.options.message][o.OS];
            } else if (this.options.message !== "") {
                d = this.options.message;
            } else {
                d = o.intl[o.language][o.OS];
            }
            d = "<p>" + d.replace("%icon", '<span class="ath-action-icon">icon</span>') + "</p>";
            this.viewport = h.createElement("div");
            this.viewport.className = "ath-viewport";
            if (this.options.modal) {
                this.viewport.className += " ath-modal";
            }
            if (this.options.mandatory) {
                this.viewport.className += " ath-mandatory";
            }
            this.viewport.style.position = "absolute";
            this.element = h.createElement("div");
            this.element.className = "ath-container ath-" + o.OS + " ath-" + o.OS + (o.OSVersion + "").substr(0, 1) + " ath-" + (o.isTablet ? "tablet" : "phone");
            this.element.style.cssText = "-webkit-transition-property:-webkit-transform,opacity;-webkit-transition-duration:0s;-webkit-transition-timing-function:ease-out;transition-property:transform,opacity;transition-duration:0s;transition-timing-function:ease-out;";
            this.element.style.webkitTransform = "translate3d(0,-" + e.innerHeight + "px,0)";
            this.element.style.transform = "translate3d(0,-" + e.innerHeight + "px,0)";
            if (this.options.icon && this.applicationIcon) {
                this.element.className += " ath-icon";
                this.img = h.createElement("img");
                this.img.className = "ath-application-icon";
                this.img.addEventListener("load", this, false);
                this.img.addEventListener("error", this, false);
                this.img.src = this.applicationIcon.href;
                this.element.appendChild(this.img);
            }
            this.element.innerHTML += d;
            this.viewport.style.left = "-99999em";
            this.viewport.appendChild(this.element);
            this.container.appendChild(this.viewport);
            if (!this.img) {
                this._delayedShow();
            }
        },
        _delayedShow: function(a) {
            setTimeout(this._show.bind(this), this.options.startDelay * 1e3 + 500);
        },
        _show: function() {
            var a = this;
            this.updateViewport();
            e.addEventListener("resize", this, false);
            e.addEventListener("scroll", this, false);
            e.addEventListener("orientationchange", this, false);
            if (this.options.modal) {
                h.addEventListener("touchmove", this, true);
            }
            if (!this.options.mandatory) {
                setTimeout(function() {
                    a.element.addEventListener("click", a, true);
                }, 1e3);
            }
            setTimeout(function() {
                a.element.style.webkitTransitionDuration = "1.2s";
                a.element.style.transitionDuration = "1.2s";
                a.element.style.webkitTransform = "translate3d(0,0,0)";
                a.element.style.transform = "translate3d(0,0,0)";
            }, 0);
            if (this.options.lifespan) {
                this.removeTimer = setTimeout(this.remove.bind(this), this.options.lifespan * 1e3);
            }
            if (this.options.onShow) {
                this.options.onShow.call(this);
            }
        },
        remove: function() {
            clearTimeout(this.removeTimer);
            if (this.img) {
                this.img.removeEventListener("load", this, false);
                this.img.removeEventListener("error", this, false);
            }
            e.removeEventListener("resize", this, false);
            e.removeEventListener("scroll", this, false);
            e.removeEventListener("orientationchange", this, false);
            h.removeEventListener("touchmove", this, true);
            this.element.removeEventListener("click", this, true);
            this.element.addEventListener("transitionend", this, false);
            this.element.addEventListener("webkitTransitionEnd", this, false);
            this.element.addEventListener("MSTransitionEnd", this, false);
            this.element.style.webkitTransitionDuration = "0.3s";
            this.element.style.opacity = "0";
        },
        _removeElements: function() {
            this.element.removeEventListener("transitionend", this, false);
            this.element.removeEventListener("webkitTransitionEnd", this, false);
            this.element.removeEventListener("MSTransitionEnd", this, false);
            this.container.removeChild(this.viewport);
            this.shown = false;
            if (this.options.onRemove) {
                this.options.onRemove.call(this);
            }
        },
        updateViewport: function() {
            if (!this.shown) {
                return;
            }
            this.viewport.style.width = e.innerWidth + "px";
            this.viewport.style.height = e.innerHeight + "px";
            this.viewport.style.left = e.scrollX + "px";
            this.viewport.style.top = e.scrollY + "px";
            var a = h.documentElement.clientWidth;
            this.orientation = a > h.documentElement.clientHeight ? "landscape" : "portrait";
            var b = o.OS == "ios" ? this.orientation == "portrait" ? screen.width : screen.height : screen.width;
            this.scale = screen.width > a ? 1 : b / e.innerWidth;
            this.element.style.fontSize = this.options.fontSize / this.scale + "px";
        },
        resize: function() {
            clearTimeout(this.resizeTimer);
            this.resizeTimer = setTimeout(this.updateViewport.bind(this), 100);
        },
        updateSession: function() {
            if (o.hasLocalStorage === false) {
                return;
            }
            localStorage.setItem(this.options.appID, JSON.stringify(this.session));
        },
        clearSession: function() {
            this.session = D0;
            this.updateSession();
        },
        optOut: function() {
            this.session.optedout = true;
            this.updateSession();
        },
        optIn: function() {
            this.session.optedout = false;
            this.updateSession();
        },
        clearDisplayCount: function() {
            this.session.displayCount = 0;
            this.updateSession();
        },
        _preventDefault: function(a) {
            a.preventDefault();
            a.stopPropagation();
        }
    };

    function I(a, b) {
        for (var c in b) {
            a[c] = b[c];
        }
        return a;
    }

    function J() {
        if (h.location.hash == g) {
            history.replaceState("", e.document.title, h.location.href.split("#")[0]);
        }
        if (C.test(h.location.href)) {
            history.replaceState("", e.document.title, h.location.href.replace(C, "$1"));
        }
        if (z.test(h.location.search)) {
            history.replaceState("", e.document.title, h.location.href.replace(z, "$2"));
        }
    }
    e.addToHomescreen = o;
})(window, document);
document.addEventListener('gameready', function(a) {
    addToHomescreen({
        appID: 'nl.zygomatic.' + a.gameName,
        maxDisplayCount: 1,
        skipFirstVisit: e0a.O0
    });
}, false);;
var GameSound = {
    ua: navigator.userAgent,
    context: e0a.N0,
    sound: e0a.N0,
    sounds: [],
    music: e0a.N0,
    audioIdle: false,
    musicMuted: false,
    musicStopped: e0a.O0,
    soundMuted: false,
    soundSprite: e0a.N0,
    pauseTime: 0,
    useWebAudioBGM: e0a.O0,
    useWebAudioFX: e0a.O0,
    playSoundFX: e0a.O0,
    musicLoaded: false,
    soundLoaded: false,
    nrSoundSlots: 5,
    curSoundSlot: 0,
    loadScript: function(a, b) {
        var c, d = document.getElementsByTagName('script')[0];
        c = document.createElement('script');
        if (b) {
            c.addEventListener('load', b, false);
        }
        c.src = a;
        d.parentNode.insertBefore(c, d);
    },
    init: function(e) {
        this.soundMuted = GameLib.getStorage('soundMuted') === e0a.O0;
        this.musicMuted = GameLib.getStorage('musicMuted') === e0a.O0;
        if (typeof config.nrSoundSlots !== e0a.w0) {
            this.nrSoundSlots = config.nrSoundSlots;
        }
        this.soundSprite = e;
        var h = /http/.test(location.protocol);
        if (!h || /(Trident|MSIE|IEMobile|Silk)/.test(this.ua) || (/Android/.test(this.ua) && !/(Chrome|Firefox|Opera)/.test(this.ua))) {
            this.useWebAudioBGM = false;
        }
        try {
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            this.context = new AudioContext();
        } catch (a) {
            this.useWebAudioBGM = false;
        }
        this.useWebAudioFX = h && this.context;
        if (/Silk/.test(this.ua) || (/Android/.test(this.ua) && !/(Chrome|Firefox|Opera)/.test(this.ua))) {
            this.playSoundFX = false;
        }

        function m(b, c) {
            var d = new XMLHttpRequest();
            d.open('GET', b, e0a.O0);
            d.responseType = 'arraybuffer';
            d.onload = function() {
                GameSound.context.decodeAudioData(d.response, function(a) {
                    GameSound[c] = a;
                    GameSound[c + 'Loaded'] = e0a.O0;
                });
            };
            d.send();
        }

        function g(a, b) {
            var c = document.createElement('audio');
            c.preload = 'auto';
            if (b == 'music') {
                c.loop = 'loop';
            }
            c.oncanplaythrough = function() {
                GameSound[b + 'Loaded'] = e0a.O0;
            };
            c.src = a;
            return c;
        }

        function j(a, b) {
            if (a) {
                m(b, 'music');
            } else {
                GameSound.music = g(b, 'music');
            }
        }

        function k(b, c) {
            if (b) {
                m(c, 'sound');
            } else {
                GameSound.loadScript('sounds/sprite.js', function() {
                    for (var a = 0; a < GameSound.nrSoundSlots; a++) {
                        GameSound.sounds[a] = g(soundSprite, 'sound');
                    }
                });
            }
        }
        var n = document.createElement('audio'),
            t = n.canPlayType('audio/ogg') ? 'ogg' : 'm4a';
        j(this.useWebAudioBGM, 'sounds/Game.' + t);
        if (this.playSoundFX) {
            k(this.useWebAudioFX, 'sounds/sprite.' + t);
        }
    },
    _pauseMusic: function(a) {
        if (this.useWebAudioBGM) {
            if (a) {
                this.pauseTime = 0;
            } else {
                var b = this.context.currentTime;
                this.pauseTime = b - (Math.floor(b / this.bufferDuration) * this.bufferDuration) || 0;
            } if (this.musicSource) {
                if (this.musicSource.stop) {
                    this.musicSource.stop(0);
                } else {
                    this.musicSource.noteOff(0);
                }
            }
        } else {
            this.music.pause();
            if (a) {
                this.music.currentTime = 0;
            }
        }
    },
    _playMusic: function() {
        if (this.useWebAudioBGM) {
            var a = this.context.createBufferSource();
            a.buffer = this.music;
            a.loop = e0a.O0;
            a.connect(this.context.destination);
            this.bufferDuration = a.buffer.duration;
            if (a.start) {
                a.start(0, this.pauseTime);
            } else {
                a.noteOn(0);
            }
            this.musicSource = a;
        } else {
            this.music.play();
        }
    },
    ping: function() {
        if (/IEMobile/.test(this.ua)) return;
        if (this.useWebAudioBGM) {
            var a = this.context.createBufferSource();
            a.buffer = this.context.createBuffer(1, 1, 22050);
            a.connect(this.context.destination);
            if (a.start) {
                a.start(0);
            } else {
                a.noteOn(0);
            }
        } else {
            this.music.play();
            this.music.pause();
        }
    },
    playSound: function(b) {
        var c = this.soundSprite[b];
        if (!c || !this.playSoundFX || this.soundMuted || this.audioIdle) {
            return;
        }
        var d = c[0],
            e = c[1];
        if (this.useWebAudioFX) {
            var h = this.context.createBufferSource();
            h.buffer = this.sound;
            h.connect(this.context.destination);
            if (h.start) {
                h.start(0, d / 1000, e / 1000);
            } else {
                h.noteGrainOn(0, d / 1000, e / 1000);
            }
        } else {
            var m = this.sounds[this.curSoundSlot++];
            if (this.curSoundSlot >= this.nrSoundSlots) {
                this.curSoundSlot = 0;
            }
            try {
                m.currentTime = d / 1000;
                setTimeout(function() {
                    m.pause();
                }, e);
                m.play();
            } catch (a) {};
        }
    },
    muteSound: function(a) {
        this.soundMuted = a;
        GameLib.setStorage('soundMuted', a);
    },
    playMusic: function() {
        if (!this.musicStopped) return;
        if (this.useWebAudioBGM && !this.musicLoaded) {
            setTimeout(function() {
                GameSound.playMusic();
            }, e0a.Z0);
        } else {
            this.musicStopped = false;
            if (this.audioIdle || this.musicMuted) {
                return;
            }
            this._playMusic();
        }
    },
    stopMusic: function() {
        this.musicStopped = e0a.O0;
        try {
            this._pauseMusic(e0a.O0);
        } catch (a) {};
    },
    muteMusic: function(a) {
        this.musicMuted = a;
        if (a) {
            this._pauseMusic(false);
        } else if (!this.audioIdle && !this.musicStopped) {
            this._playMusic();
        }
        GameLib.setStorage('musicMuted', a);
    },
    setIdle: function(a) {
        if (a === this.audioIdle) return;
        this.audioIdle = a;
        if (a) {
            this._pauseMusic(false);
        } else if (!this.musicMuted && !this.musicStopped) {
            this._playMusic();
        }
    }
};
document.addEventListener('gameready', function(a) {
    GameSound.init(config.soundSprite);
}, false);;
var GameHiscore = {
    gameName: '',
    lang: e0a.H,
    salt1: 'NCM1Kkc=',
    salt2: 'UXA/fHFh',
    apiDomain: e0a.N0,
    apiUrl: e0a.N0,
    init: function(a) {
        this.gameName = a;
        this.apiDomain = /\.dev\//.test(location.pathname) ? 'dev.api.zygomatic.nl' : 'api.zygomatic.nl';
        this.apiUrl = 'http://' + this.apiDomain + '/hiscore';
        if (/(leukstespellen\.nl|gamesonly\.net)$/i.test(GameLib.getHostDomain())) {
            this.apiDomain = RegExp.$1.toLowerCase();
            this.apiUrl = 'http://www.' + this.apiDomain + '/highscore.php';
        }
    },
    set: function(a, b) {
        if (typeof a === 'object') {
            for (var c in a) {
                this[c] = a[c];
            }
        } else {
            this[a] = b;
        }
    },
    md5: function(t) {
        function p(a, b) {
            var c = (a & 0xFFFF) + (b & 0xFFFF),
                d = (a >> 16) + (b >> 16) + (c >> 16);
            return (d << 16) | (c & 0xFFFF);
        }

        function C(a, b) {
            return (a << b) | (a >>> (32 - b));
        }

        function z(a, b, c, d, e, h) {
            return p(C(p(p(b, a), p(d, h)), e), c);
        }

        function s(a, b, c, d, e, h, m) {
            return z((b & c) | ((~b) & d), a, b, e, h, m);
        }

        function o(a, b, c, d, e, h, m) {
            return z((b & d) | (c & (~d)), a, b, e, h, m);
        }

        function v(a, b, c, d, e, h, m) {
            return z(b ^ c ^ d, a, b, e, h, m);
        }

        function F(a, b, c, d, e, h, m) {
            return z(c ^ (b | (~d)), a, b, e, h, m);
        }

        function Z(a, b) {
            a[b >> 5] |= 0x80 << (b % 32);
            a[(((b + 64) >>> 9) << 4) + 14] = b;
            var c, d, e, h, m, g = 1732584193,
                j = -271733879,
                k = -1732584194,
                n = 271733878;
            for (c = 0; c < a.length; c += 16) {
                d = g;
                e = j;
                h = k;
                m = n;
                g = s(g, j, k, n, a[c], 7, -680876936);
                n = s(n, g, j, k, a[c + 1], 12, -389564586);
                k = s(k, n, g, j, a[c + 2], 17, 606105819);
                j = s(j, k, n, g, a[c + 3], 22, -1044525330);
                g = s(g, j, k, n, a[c + 4], 7, -176418897);
                n = s(n, g, j, k, a[c + 5], 12, 1200080426);
                k = s(k, n, g, j, a[c + 6], 17, -1473231341);
                j = s(j, k, n, g, a[c + 7], 22, -45705983);
                g = s(g, j, k, n, a[c + 8], 7, 1770035416);
                n = s(n, g, j, k, a[c + 9], 12, -1958414417);
                k = s(k, n, g, j, a[c + 10], 17, -42063);
                j = s(j, k, n, g, a[c + 11], 22, -1990404162);
                g = s(g, j, k, n, a[c + 12], 7, 1804603682);
                n = s(n, g, j, k, a[c + 13], 12, -40341101);
                k = s(k, n, g, j, a[c + 14], 17, -1502002290);
                j = s(j, k, n, g, a[c + 15], 22, 1236535329);
                g = o(g, j, k, n, a[c + 1], 5, -165796510);
                n = o(n, g, j, k, a[c + 6], 9, -1069501632);
                k = o(k, n, g, j, a[c + 11], 14, 643717713);
                j = o(j, k, n, g, a[c], 20, -373897302);
                g = o(g, j, k, n, a[c + 5], 5, -701558691);
                n = o(n, g, j, k, a[c + 10], 9, 38016083);
                k = o(k, n, g, j, a[c + 15], 14, -660478335);
                j = o(j, k, n, g, a[c + 4], 20, -405537848);
                g = o(g, j, k, n, a[c + 9], 5, 568446438);
                n = o(n, g, j, k, a[c + 14], 9, -1019803690);
                k = o(k, n, g, j, a[c + 3], 14, -187363961);
                j = o(j, k, n, g, a[c + 8], 20, 1163531501);
                g = o(g, j, k, n, a[c + 13], 5, -1444681467);
                n = o(n, g, j, k, a[c + 2], 9, -51403784);
                k = o(k, n, g, j, a[c + 7], 14, 1735328473);
                j = o(j, k, n, g, a[c + 12], 20, -1926607734);
                g = v(g, j, k, n, a[c + 5], 4, -378558);
                n = v(n, g, j, k, a[c + 8], 11, -2022574463);
                k = v(k, n, g, j, a[c + 11], 16, 1839030562);
                j = v(j, k, n, g, a[c + 14], 23, -35309556);
                g = v(g, j, k, n, a[c + 1], 4, -1530992060);
                n = v(n, g, j, k, a[c + 4], 11, 1272893353);
                k = v(k, n, g, j, a[c + 7], 16, -155497632);
                j = v(j, k, n, g, a[c + 10], 23, -1094730640);
                g = v(g, j, k, n, a[c + 13], 4, 681279174);
                n = v(n, g, j, k, a[c], 11, -358537222);
                k = v(k, n, g, j, a[c + 3], 16, -722521979);
                j = v(j, k, n, g, a[c + 6], 23, 76029189);
                g = v(g, j, k, n, a[c + 9], 4, -640364487);
                n = v(n, g, j, k, a[c + 12], 11, -421815835);
                k = v(k, n, g, j, a[c + 15], 16, 530742520);
                j = v(j, k, n, g, a[c + 2], 23, -995338651);
                g = F(g, j, k, n, a[c], 6, -198630844);
                n = F(n, g, j, k, a[c + 7], 10, 1126891415);
                k = F(k, n, g, j, a[c + 14], 15, -1416354905);
                j = F(j, k, n, g, a[c + 5], 21, -57434055);
                g = F(g, j, k, n, a[c + 12], 6, 1700485571);
                n = F(n, g, j, k, a[c + 3], 10, -1894986606);
                k = F(k, n, g, j, a[c + 10], 15, -1051523);
                j = F(j, k, n, g, a[c + 1], 21, -2054922799);
                g = F(g, j, k, n, a[c + 8], 6, 1873313359);
                n = F(n, g, j, k, a[c + 15], 10, -30611744);
                k = F(k, n, g, j, a[c + 6], 15, -1560198380);
                j = F(j, k, n, g, a[c + 13], 21, 1309151649);
                g = F(g, j, k, n, a[c + 4], 6, -145523070);
                n = F(n, g, j, k, a[c + 11], 10, -1120210379);
                k = F(k, n, g, j, a[c + 2], 15, 718787259);
                j = F(j, k, n, g, a[c + 9], 21, -343485551);
                g = p(g, d);
                j = p(j, e);
                k = p(k, h);
                n = p(n, m);
            }
            return [g, j, k, n];
        }

        function D0(a) {
            var b, c = '';
            for (b = 0; b < a.length * 32; b += 8) {
                c += String.fromCharCode((a[b >> 5] >>> (b % 32)) & 0xFF);
            }
            return c;
        }

        function I(a) {
            var b, c = [];
            c[(a.length >> 2) - 1] = undefined;
            for (b = 0; b < c.length; b += 1) {
                c[b] = 0;
            }
            for (b = 0; b < a.length * 8; b += 8) {
                c[b >> 5] |= (a.charCodeAt(b / 8) & 0xFF) << (b % 32);
            }
            return c;
        }

        function J(a) {
            return D0(Z(I(a), a.length * 8));
        }

        function K(a, b) {
            var c, d = I(a),
                e = [],
                h = [],
                m;
            e[15] = h[15] = undefined;
            if (d.length > 16) {
                d = Z(d, a.length * 8);
            }
            for (c = 0; c < 16; c += 1) {
                e[c] = d[c] ^ 0x36363636;
                h[c] = d[c] ^ 0x5C5C5C5C;
            }
            m = Z(e.concat(I(b)), 512 + b.length * 8);
            return D0(Z(h.concat(m), 512 + 128));
        }

        function M0(a) {
            var b = '0123456789abcdef',
                c = '',
                d, e;
            for (e = 0; e < a.length; e += 1) {
                d = a.charCodeAt(e);
                c += b.charAt((d >>> 4) & 0x0F) + b.charAt(d & 0x0F);
            }
            return c;
        }

        function Q(a) {
            return unescape(encodeURIComponent(a));
        }

        function X0(a) {
            return J(Q(a));
        }

        function r(a) {
            return M0(X0(a));
        }
        return r(t);
    },
    submitScore: function(b) {
        var c;
        window.addEventListener('message', function(a) {
            if (/api.zygomatic.nl/.test(a.origin)) {
                window.scrollTo(0, 0);
            }
        });
//        if (/(leukstespellen\.nl|gamesonly\.net)/.test(this.apiDomain)) {
//            c = this.md5('www.' + this.apiDomain + this.gameName + b + 'zygomaticgames');
//            window.open(this.apiUrl + '?game=' + this.gameName + '&score=' + escape(b) + '&otherparam=' + escape(c), e0a.A0);
//        } else {
//            c = this.md5(atob(this.salt1) + this.gameName + this.lang + b + atob(this.salt2));
//            GameLib.showPopup(e0a.N0, this.apiUrl + '/submitScore.php?game=' + escape(this.gameName) + '&lang=' + escape(this.lang) + '&score=' + escape(b) + '&hash=' + escape(c), 480, 340, false);
//        }
    },
    leaderBoard: function() {
//        if (/(leukstespellen\.nl|gamesonly\.net)/.test(this.apiDomain)) {
//            window.open(this.apiUrl + '?game=' + this.gameName, e0a.A0);
//        } else {
//            GameLib.showPopup(e0a.N0, this.apiUrl + '/leaderBoard.php?game=' + escape(this.gameName) + '&lang=' + escape(this.lang), 480, 340, false);
//        }
    }
};
document.addEventListener('gameready', function(a) {
    GameHiscore.init(a.gameName);
}, false);;
var GameAds = {
    adsManager: e0a.N0,
    adsLoader: e0a.N0,
    adDisplayContainer: e0a.N0,
    intervalTimer: e0a.N0,
    resizeTimer: e0a.N0,
    gameDiv: e0a.N0,
    adDiv: e0a.N0,
    doneFn: e0a.N0,
    throbber: e0a.N0,
    init: function() {
        if (!GameLib.online || !ThirdParty.config.ads || !ThirdParty.config.ads.adsense || !ThirdParty.config.ads.adsense.url) {
            return false;
        }
        this.gameDiv = document.getElementById(e0a.h0);
        this.adDiv = document.getElementById('adContainer');
        var a = document.createElement('script'),
            b = document.getElementsByTagName('script')[0];
        a.src = '';
        b.parentNode.insertBefore(a, b);
        return e0a.O0;
    },
    showAd: function() {
        var b = 'lastAdTimestamp',
            c, d = Math.round(1 * new Date() / e0a.Z0),
            e = GameLib.getHostDomain();
        if (!GameLib.online || !ThirdParty.config.ads || !ThirdParty.config.ads.adsense || !ThirdParty.config.ads.adsense.url) {
            return false;
        };
        console.log('Host domain: ' + e);
        try {
            c = (',' + window.zygomatic.settings.skipGoogleAdDomains.join(',') + ',').indexOf(e) === -1;
        } catch (a) {
            c = false;
        };
        if (c) {
            var h = GameLib.getStorage(b),
                m = ThirdParty.config.ads.interval ? ThirdParty.config.ads.interval : 3600;
            if (h !== false) {
                if (d - h < m) {
                    return false;
                }
            }
            GameLib.setStorage(b, d);
        }
        return c;
    },
    showLoading: function(a) {
        if (a) {
            this.throbber = document.createElement(e0a.R0);
            this.throbber.id = 'throbber';
            this.throbber.innerHTML = '<span class="throbber">Loading...</span>';
            this.adDiv.appendChild(this.throbber);
            this.adDiv.style.visibility = e0a.K0;
        } else {
            this.throbber.parentNode.removeChild(this.throbber);
        }
    },
    requestAd: function(b) {
        var c = this;
        if (typeof b == 'function') {
            c.doneFn = b;
        }

        function d() {
            var a = c.gameDiv.getBoundingClientRect();
            c.adDiv.style.top = a.top + 'px';
            c.adDiv.style.left = a.left + 'px';
            c.adDiv.style.width = a.width + 'px';
            c.adDiv.style.height = (a.height + 1) + 'px';
        }
        if (typeof google == e0a.w0) {
            this.adDiv.style.visibility = e0a.K0;
            this.adDiv.innerHTML = '<a href="http://yx8.com/?litifangkuailianliankan" target="_blank"><img src="http://cdn.htmlgames.com/banner/adblock.png" style="width:100%;height:100%"></a><div id="timeLeft"></div>';
            window.addEventListener(e0a.P, d, false);
            d();
            var e = document.getElementById('timeLeft'),
                h = document.createElement(e0a.R0),
                m = 30,
                g = 30;
            e.appendChild(h);
            GameAds.intervalTimer = setInterval(function() {
                g--;
                h.style.width = 100 - Math.round(g / m * 100) + '%';
                if (g == -1) {
                    window.removeEventListener('resize', d, false);
                    GameAds.adDone('timeout');
                }
            }, 1000);
            return;
        }
        this.resize();
        c.showLoading(e0a.O0);
        c.createAdDisplayContainer();
        c.adDisplayContainer.initialize();
        c.adsLoader = new google.ima.AdsLoader(c.adDisplayContainer);
        c.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, c.onAdsManagerLoaded, false);
        c.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, c.onAdError, false);
        var j = new google.ima.AdsRequest(),
            k = location.protocol + location.port + '//' + location.hostname + location.pathname.substr(0, location.pathname.lastIndexOf('/')) + '/about.html';
        j.adTagUrl = ThirdParty.config.ads.adsense.url.replace('[description_url]', encodeURIComponent(k));
        if (/games\.(avoid\.org|webgear\.nl)/.test(location.hostname)) {
            j.adTagUrl += '&adtest=on';
        }
        j.linearAdSlotWidth = GameLib.gameWidth;
        j.linearAdSlotHeight = GameLib.gameHeight;
        j.nonLinearAdSlotWidth = Math.round(GameLib.gameWidth * GameLib.scale);
        j.nonLinearAdSlotHeight = Math.round((GameLib.gameHeight - 50) * GameLib.scale);
        c.adsLoader.requestAds(j);
    },
    createAdDisplayContainer: function() {
        this.adDisplayContainer = new google.ima.AdDisplayContainer(GameAds.adDiv);
    },
    onAdsManagerLoaded: function(b) {
        var c = new google.ima.AdsRenderingSettings();
        c.loadVideoTimeout = 50;
        GameAds.adsManager = b.getAdsManager(GameAds.gameDiv, c);
        GameAds.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, GameAds.onAdError);
        GameAds.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, GameAds.onAdEvent);
        GameAds.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED, GameAds.onAdEvent);
        GameAds.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, GameAds.onAdEvent);
        GameAds.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, GameAds.onAdEvent);
        GameAds.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED, GameAds.onAdEvent);
        GameAds.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED, GameAds.onAdEvent);
        GameAds.adsManager.addEventListener(google.ima.AdEvent.Type.USER_CLOSE, GameAds.onAdEvent);
        try {
            GameAds.adsManager.init(GameLib.gameWidth, GameLib.gameHeight, google.ima.ViewMode.NORMAL);
            GameAds.adsManager.start();
        } catch (a) {}
    },
    resize: function(a, b) {
        var c = this.gameDiv.getBoundingClientRect(),
            d;
        for (d in {
            left: 0,
            top: 0,
            width: 0,
            height: 0
        }) {
            this.adDiv.style[d] = Math.round(c[d]) + 'px';
        }
        if (arguments.length == 2) {
            if (c.width < a || c.height < b) {
                this.adDone('error');
            } else {
                GameAds.adsManager.resize(Math.ceil(c.width), Math.ceil(c.height), google.ima.ViewMode.FULLSCREEN);
            }
        }
    },
    resizeHandler: function() {
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(function() {
            GameAds.resize(0, 0);
        }, 50);
    },
    onAdEvent: function(a) {
        var b = 'complete',
            c = a.getAd(),
            d = c.isLinear();
        switch (a.type) {
            case google.ima.AdEvent.Type.LOADED:
                var e = c.getWidth(),
                    h = c.getHeight(),
                    m;
                GameAds.showLoading(false);
                GameAds.resize(e, h);
                GameAds.adDiv.querySelectorAll('iframe')[0].style.visibility = e0a.K0;
                window.addEventListener(e0a.P, GameAds.resizeHandler, false);
                break;
            case google.ima.AdEvent.Type.STARTED:
                var g = document.getElementById('timeLeft'),
                    j = document.createElement(e0a.R0);
                g.appendChild(j);
                if (d) {
                    var k = c.getDuration();
                    GameAds.intervalTimer = setInterval(function() {
                        j.style.width = 100 - Math.round(GameAds.adsManager.getRemainingTime() / k * 100) + '%';
                    }, e0a.g1);
                } else {
                    var n = 15,
                        k = 15;
                    GameAds.adDiv.onclick = function() {
                        GameAds.adDone(b);
                    };
                    GameAds.intervalTimer = setInterval(function() {
                        k--;
                        j.style.width = 100 - Math.round(k / n * 100) + '%';
                        if (k == -1) {
                            GameAds.adDone('timeout');
                        }
                    }, 1000);
                }
                break;
            case google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED:
                break;
            case google.ima.AdEvent.Type.COMPLETE:
            case google.ima.AdEvent.Type.USER_CLOSE:
                GameAds.adDone(b);
                break;
            case google.ima.AdEvent.Type.SKIPPED:
                GameAds.adDone('skipped');
                break;
        }
    },
    adDone: function(b, c) {
        if (typeof c == e0a.w0) {
            c = e0a.O0;
        }
        var d = this;
        window.removeEventListener(e0a.P, d.resizeHandler, false);
        if (d.intervalTimer) {
            clearInterval(d.intervalTimer);
        }
        d.adDiv.innerHTML = '<div id="timeLeft"></div>';
        d.adDiv.style.visibility = 'hidden';
        try {
            GameAds.adsManager.destroy();
        } catch (a) {};
        if (c && d.doneFn) {
            d.doneFn(b);
        }
    },
    onAdError: function(b) {
        console.log(b.getError());
        GameAds.adDone('error');
        try {
            GameAds.adsManager.destroy();
        } catch (a) {};
    }
};
document.addEventListener('gameready', function(a) {
    GameAds.init();
}, false);;
(function(a, b, c, d, e, m, h) {})();
if (ThirdParty.config.gaUA && GameLib.online) {};;